<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Advanced | Nolboo's Blog]]></title>
  <link href="http://nolboo.github.io/blog/categories/advanced/atom.xml" rel="self"/>
  <link href="http://nolboo.github.io/"/>
  <updated>2013-10-15T20:42:31+09:00</updated>
  <id>http://nolboo.github.io/</id>
  <author>
    <name><![CDATA[Nolboo Kim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML & CSS 중급자 가이드 - 6강 : jQuery]]></title>
    <link href="http://nolboo.github.io/blog/2013/07/22/advanced-guide-to-html-and-css-6-slash-10/"/>
    <updated>2013-07-22T21:20:00+09:00</updated>
    <id>http://nolboo.github.io/blog/2013/07/22/advanced-guide-to-html-and-css-6-slash-10</id>
    <content type="html"><![CDATA[<p>원본 : <a href="http://learn.shayhowe.com/advanced-html-css/jquery">An Advanced Guide to HTML &amp; CSS - LESSON 6 : jQuery</a></p>

<p>웹 디자이너나 프론트 엔드 개발자가 되려면 일반적으로 어느 정도는 (종종 JS라고 불리우는) 자바스크립트와 jQuery에 부딪칠 것이다. 상위 10,000 웹사이트에서 자바스크립트는 <a href="http://trends.builtwith.com/docinfo/Javascript">92%가 넘게</a> 사용되고, jQuery는 <a href="http://trends.builtwith.com/javascript/jQuery">63%를 넘게</a> 사용되고 있다. 말할 필요도 없이 매우 인기가 있다. 미래의 어떤 시기에 자신의 행동을 구축하기위해 자바스크립트나 jQuery를 <a href="http://jsforcats.com/">코딩하길</a> 열망할 수도 있다.</p>

<p>자바스크립트와 jQuery가 정확히 무엇인지 묻고 있다면, 두려워말라. 이 단원에서 자바스크립트의 간략한 개요를 보여줄 것이고 jQuery도 살펴볼 것이다.</p>

<h2 id="javascript-intro">JavaScript Intro</h2>

<p><a href="https://developer.mozilla.org/en-US/docs/JavaScript/A_re-introduction_to_JavaScript">자바스크립트</a>는 웹사이트에 상호작용성을 추가할 수 있게 해주고 유저 경험을 풍부하게 하는 것을 돕는다. HTML은 페이지에 <strong>구조</strong>를 제공하고 CSS는 <strong>외모</strong>를 제공하고 자바스크립트는 <strong>행동</strong>을 제공한다.
<!-- more -->
CSS처럼, 자바스크립트는 <code>.js</code> 화일 확장자로 외부 화일에 저장해야하며, <code>script</code> 엘리먼트를 사용하여 HTML 문서 안에서 참조(reference)된다. HTML 안의 자바스크립트 참조가 어디에 있느냐는 그것이 언제 실행되야하는가에 따라 다르다. 일반적으로 말하면 자바스크립트 화일이 연급되는 가장 좋은 위치는 - 모든 HTML이 파싱되고난 후에 자바스크립트가 로드되도록 - <code>&lt;/body&gt;</code>태그가 끝나기 바로 전이다. 그러나, 때론 HTML을 렌더링하거나 그것의 행동을 결정하는 것을 도와야하기 때문에 문서의 <code>head</code> 안에서 참조될 수 있다.</p>

<pre><code>&lt;script src="script.js"&gt;&lt;/script&gt;
</code></pre>

<h3 id="values--variables">Values &amp; Variables</h3>

<p>값(value)과 변수(variable)는 자바스크립트 기초의 일부다. 일반적으로  값은 자바스크립트가 인식할 다양한 종류의 값이고, 변수는 이 값들을 저장하고 공유하기 위해 사용된다.</p>

<p>값은 문자열, 참/거짓 불린(Boolean), 숫자, <code>undefined</code>, <code>null</code>, 혹은 함수와 객체 같은 값들도 포함할 수 있다.</p>

<p>변수가 정의되는 인기있는 방법 중 하나는 <code>var</code> 키워드와 뒤따르는 변수명, 등호 기호 (<code>=</code>), 그리고 값과 세미콜론 (<code>;</code>)으로 마친다. 변수 이름은 문자, 밑줄 (<code>_</code>)이나 달러 기호 (<code>$</code>)로 시작되어야 한다. 변수는 숫자로 시작될 수 없으나 시작 이후에는 사용될 수 있다. 어떤 경우에도 하이픈은 사용할 수 없다. 더불어 자바스크립트는 대소문자를 구분하기 때문에 문자는 <code>a</code>에서 <code>z</code>까지의 대/소문자 모두가 포함된다.</p>

<p>역자 참조 : MDN <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Variables">Values, variables, and literals</a></p>

<p>변수를 명하는 일반적인 규칙은 대쉬나 밑줄을 젼혀 사용하지 않고 캐멀케이스(<a href="http://en.wikipedia.org/wiki/CamelCase">camelCase</a>)를 사용하는 것이다. 캐멀케이스는 빈칸을 없애고 첫 단어를 제외한 각 단어를 대문자로 시작하여 단어들을 조합한다. 예를 들면 <code>shay_is_awesome</code>은 <code>shayIsAwesome</code>으로 이름짓는 것이 더 일반적이다.</p>

<pre><code>var theStarterLeague = 125;
var food_truck = 'Coffee';
var mixtape01 = true;
var vinyl = ['Miles Davis', 'Frank Sinatra', 'Ray Charles'];
</code></pre>

<h3 id="statements">Statements</h3>

<p>전반적으로 자바스크립트는 쓰여진 순서대로 브라우저에 의해 실행되는 문장(statement)의 집합이다. 이 문장들은 수행될 댜양한 행동들을 결정하는 명령을 제공한다. 문장들은 다양한 형태와 크기가 되고, 여러 문장은 세미콜론 <code>;</code>으로 나뉜다. 새로운 문장은 새로운 줄에서 시작되어야하며 들여쓰기는 문장들을 더 읽기쉽게 하기위해 사용해야하지만, 반드시 요구되는 것은 아니다.</p>

<pre><code>log(polaroid);
return('bicycle lane');
alert('Congratulations, you ' + outcome);
</code></pre>

<h3 id="functions">Functions</h3>

<p>자바스크립트 기초에 더해, 함수(function)을 살펴보는 것은 중요하다. 함수는 지금, 또는 나중을 위해 저장된, 다른 인수(argument)를 받아들이기도 하는 함수에 의존하는, 기술된 일련의 행동을 수행하는 방법을 제공한다.</p>

<p>함수는 <code>function</code> 키워드와 뒤따르는 함수명, 필요할 경우, 쉼표로 분리된 인수 목록(전체가 소괄호로 감싸진다)과 함수를 정의하는 자바스크립트 문장 또는 문장들(전체가 중괄호 <code>{}</code>로 둘러싸여진다)을 사용해 정의된다.</p>

<pre><code>function sayHello(name) {
  return('Hello ' + name);
}
</code></pre>

<h3 id="arrays">Arrays</h3>

<p>인정하듯이 몇몇 값은 배열로 반환될 수 있다. 배열은 항목이나 값의 목록을 저장하는 방법을 포함한다. 여러 가지 이유로 배열은 다양한 매서드와 연산자로 팀색할 수 있어 도움이 된다. 게다가 상황에 따라 배열은 다양한 값을 저장하고 반환하는 데 사용될 수 있다.</p>

<p>일반적으로 말하면 배열은 대괄호 <code>[]</code>와 쉼표로 분리된 항목들로 식별된다. 항목은 <code>0</code>에서 시작되어 증가한다. 한 목록에서 세번째 아이템을 식별할 때는 실제 <code>[2]</code>로서 식별된다.</p>

<h3 id="objects">Objects</h3>

<p>자바스크립트는 키/값의 한 쌍인 객체의 기초 위에 만들어진 것이기도 하다. 예를 들어 <code>school</code>로 이름지어진 객체가 있고, 이 객체가 <code>name</code>, <code>location</code>, <code>students</code>, <code>teachers</code> 키들(프로퍼티/속성으로도 알려짐)과 그들의 값을 포함하고 있다고 하자.</p>

<p>아래 예제에서 변수 <code>school</code>은 여러 속성을 보유하는 객체로 설정된다. 각 속성은 하나의 키와 값을 가진다. 전체 객체는 중괄호 <code>{}</code>로 감싸졌고, 속성은 쉽표로 분리되며, 각 속성은 콜론과 값이 뒤따르는 하나의 키를 갖는다.</p>

<p>OBJECTS</p>

<pre><code>var school = {
  name: 'The Starter League',
  location: 'Merchandise Mart',
  students: 120,
  teachers: ['Jeff', 'Raghu', 'Carolyn', 'Shay']
};
</code></pre>

<p>ARRAY</p>

<pre><code>var school = ["Austin", "Chicago", "Portland"];
</code></pre>

<p><img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/jquery/console.png" alt="Web Inspector Console" /></p>

<p><strong>Fig. 6.01</strong></p>

<p>크롬 웹브라우저 안에 내장된 개발자 도구를 사용하면 자바스크립트를 콘솔 안에서 실행시킬 수 있다.</p>

<h2 id="jquery-intro">jQuery Intro</h2>

<p>자바스크립트와 그 기초의 일부에 대한 기본적인 이해와 함께 jQuery를 살펴볼 차례다. jQuery는 HTML, CSS와 자바스크립트 간의 상호 작용을 단순화시키기 위해 존 레식이 작성한 오픈소스 자바스크립트 라이브러리다. jQuery가 출시된 2006년 이후 급성장하였고 크고 작은 웹사이트와 기업에서 사용되고 있다.</p>

<p>jQuery를 그렇게 인기있게 만든 것은 CSS를 닯은 실렉션과 동작의 알기쉬운 분리와 같은 <a href="https://tutsplus.com/course/30-days-to-learn-jquery/">손쉬운 사용</a>이었다. jQuery의 이점은 막대하지만 우리 목적은 엘리먼트를 찾고 그것들과 작업을 수행하는 능력에 대해서만 고려해볼 것이다.</p>

<h3 id="getting-started-with-jquery">Getting Started with jQuery</h3>

<p>jQuery 사용의 첫걸음은 HTML 문서 안에 그것을 참조하는 것이다. 자바스크립트에서 이전에 말했듯이 <code>&lt;/body&gt;</code> 태그의 바로 앞에 <code>script</code> 엘리먼트를 사용함으로 행해진다. jQuery는 자신이 라이브러리이기 때문에 다른 자바스트립트가 쓰여진 것과는 전부 분리시키는 것이 가장 좋다.</p>

<p>jQuery를 참조하는 것은 몇 가지 옵션이 있다. 특히, 축소되거나 압축되지 않은 버전을 사용할지 여부, 그리고 <a href="https://developers.google.com/speed/libraries/devguide">구글 호스팅 라이브러리</a>와 같은 컨텐츠 전송 네트워크(CDN)을 사용할지 여부와 같은 옵션이 있다. 라이브 프로덕션 환경에서 코드가 쓰여지는 경우에는 더 나은 로딩 시간을 위해 축소된 버전을 사용하는 것이 권장된다. 게다가 구글과 같은 CDN은 로딩 시간과 잠재적인 캐싱 이득에 도움이 된다.</p>

<pre><code>&lt;script src="http://nolboo.github.io//ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="script.js"&gt;&lt;/script&gt;    
</code></pre>

<p>위의 코드 예제에서 두번째 <code>script</code> 엘리먼트는 또 하나의 자바스크립트 화일을 참조하고 있는 것을 주목하라. 모든 커스텀, 직접 쓴 자바스크립트과 JQuery는 이 화일에서 쓰여져야한다. 더불어 이 화일은 이미 정의된 JQuery 함수를 참조할 수 있도록 jQuery 화일 뒤에 명확하게 위치하여야 한다.</p>

<blockquote>
  <h4 id="where-is-the-leading-http">Where is the leading http?</h4>

  <p>위 예제에서 구글 CDN 참조 안에 선행하는(leading) <code>http</code>가 없는 것을 발견할 수 있다. <code>http</code>와 <code>https</code> 연결을 모두 허용하기위해, <code>http</code>를 의도적으로 생략한 것이다. 웹 서버의 이점없이 로컬에서 동작할 때는 시스템의 로컬 디스크 드라이브의 화일을 찾는 것을 방지하려면 선행하는 <code>http</code>가 필요할 것이다.</p>
</blockquote>

<h3 id="jquery-object">jQuery Object</h3>

<p>jQuery는 자신의 객체 - 달러 기호 <code>$</code>, <code>jQuery</code>라고도 알려진 - 와 함께 제공된다. <code>$</code> 객체는 엘리먼트를 선택하고 작업을 수행하려하는 엘리먼트 노드를 반환하기위해 특별히 만들어졌다. 이 선택과 행동은 실제 jQuery 라이브러리의 바깥에서 참조되는 새로운 화일에 작성되어야 한다.</p>

<pre><code>$();
jQuery();
</code></pre>

<h3 id="document-ready">Document Ready</h3>

<p>페이지를 탐색하고 조작하기위해 jQuery를 시동하기(역자주 : trigging은 triggering의 오타인듯) 전에 DOM의 로딩이 끝날 때까지 기다리는 것이 가장 좋다. 다행히 jQuery는 <code>.ready()</code> 이벤트를 가지고 있다.
우리가 손수 쓴 jQuery 코드를 이 함수 안에 모두 배치하여 페이지가 로드되어 DOM이 준비될 때 까지 그것이 실행되지 않을 것을 보장할 수 있다.</p>

<pre><code>$(document).ready(function(event){ 
  // jQuery code 
});
</code></pre>

<h2 id="selectors">Selectors</h2>

<p>앞에서 언급하였듯이 jQuery의 핵심 개념 중 하나는 <a href="http://api.jquery.com/category/selectors/">엘리먼트를 선택</a>하는 것과 작업을 수행하는 것이다. jQuery는, CSS를 모방함으로써 극도로 쉽게, 선택 작업과 엘리먼트나 엘리먼트들의 작업을 훌륭하게 해왔다. 일반적인 CSS 실렉터에 뛰어넘어 jQuery는 사용 브라우저에 상관없이 작동하는 고유 CSS3 실렉터를 모두 지원한다.</p>

<p>jQuery 객체 <code>$()</code>를 호출할 때 실렉터를 포함하면 그것을 조작할 수 있는 DOM 노드를 반환할 것이다. 실렉터는 소괄호 <code>('...')</code> 안에 넣고 CSS의 실렉터와 똑같은 엘리먼트를 선택할 수 있다.</p>

<pre><code>$('.feature');              // Class selector
$('li strong');             // Descendant selector
$('em, i');                 // Multiple selector
$('a[target="_blank"]');    // Attribute selector
$('p:nth-child(2)');        // Pseudo-class selector
</code></pre>

<h3 id="this-selection-keyword">This Selection Keyword</h3>

<p>jQuery 함수 안에서 작업할 때 원래의 실렉터 안에서 참조되었던 엘리먼트를 선택하고 싶을 것이다. 이 경우에는 <code>this</code> 키워드가 현재 핸들러에서 선택된 엘리먼트를 참조하는 데 사용될 수 있다.</p>

<pre><code>$('div').click(function(event){ 
  $(this);
});
</code></pre>

<blockquote>
  <h4 id="jquery-selection-filters">jQuery Selection Filters</h4>

  <p>CSS 실렉터가 충분치 못하다면 JQuery에 내장된 커스텀 <a href="http://api.jquery.com/category/selectors/jquery-selector-extensions/">필터들</a>이 도움이 될 것이다. 이 필터들은 CSS의 확장이고 엘리먼트나 관련자를 선택할 때 더 많은 제어할 수 있다.</p>

  <pre><code>  $('div:has(strong)');
</code></pre>

  <p>있는 그대로 이 필터들은 실렉터 안에서 사용될 수 있지만, DOM에 순수하지(native) 않기 때문에 약간 느려진다. 필터를 사용할 때 최고의 결과는 jQuery 탐색 기능 중 <code>:filter()</code> 매서드를 이용하여 얻어진다.</p>
</blockquote>

<h2 id="traversing">Traversing</h2>

<p>종종 일반적인 CSS 실렉터만으로는 잘라내듯 선택되지 않아 좀 더 세세한 제어가 요구된다. 다행히 jQuery는 DOM 트리를 위아래로 탐색(traverse)하여 필요한 대로 엘리먼트를 걸러내고 선택하는 몇 가지 매서드를 제공한다.</p>

<p>DOM 내부의 엘리먼트를 걸러내기 시작하려면 상대적으로 탐색하는 것이 필요하다. 아래 예에서 애초의 선택은 DOM의 모든 <code>div</code> 엘리먼트를 찾고 난 후, <code>.not()</code> 매서드를 사용하여 필터링한다. 이 구체적인 매서드로 <code>type</code>나 <code>collection</code> 클래스를 갖지 않는 <code>div</code> 엘리먼트가 선택될 것이다.</p>

<pre><code>$('div').not('.type, .collection');
</code></pre>

<h3 id="chaining-methods">Chaining Methods</h3>

<p>선택된 엘리먼트를 훨씬 더 많이 제어하기 위해, 다양한 탐색 매서드들을 단순히 점을 사용하여 서로 연결할 수 있다.</p>

<p>아래 코드 예제는  <code>.not()</code> 매서드와 <code>.parent()</code>를 모두 사용한다. 함께 결합해서 <code>type</code> 혹은 <code>collection</code> 클래스를 갖지않는 <code>div</code> 엘리먼트의 부모 엘리먼트만을 선택할 것이다.</p>

<pre><code>$('div').not('.type, .collection').parent();
</code></pre>

<h3 id="traversing-methods">Traversing Methods</h3>

<p>JQuery는 상당수의 <a href="http://api.jquery.com/category/traversing/">탐색</a> 매서드를 사용할 수 있다. 그것들은 일반적으로 필터링(filtering), 기타 탐색(miscellaneous traversing), DOM 트리 탐색(DOM tree traversing)의 세가지 범주에 속한다. 각 범주의 구체적인 메서드는 아래와 같다.</p>

<h4 id="filtering">Filtering</h4>

<ul>
  <li><code>.eq()</code></li>
  <li><code>.filter()</code></li>
  <li><code>.first()</code></li>
  <li><code>.has()</code></li>
  <li><code>.is()</code></li>
  <li><code>.last()</code></li>
  <li><code>.map()</code></li>
  <li><code>.not()</code></li>
  <li><code>.slice()</code></li>
</ul>

<h4 id="miscellaneous-traversing">Miscellaneous Traversing</h4>

<ul>
  <li><code>.add()</code></li>
  <li><code>.andSelf()</code></li>
  <li><code>.contents()</code></li>
  <li><code>.end()</code></li>
</ul>

<h4 id="dom-tree-traversal">DOM Tree Traversal</h4>

<ul>
  <li><code>.children()</code></li>
  <li><code>.closest()</code></li>
  <li><code>.find()</code></li>
  <li><code>.next()</code></li>
  <li><code>.nextAll()</code></li>
  <li><code>.nextUntil()</code></li>
  <li><code>.offsetParent()</code></li>
  <li><code>.parent()</code></li>
  <li><code>.parents()</code></li>
  <li><code>.parentsUntil()</code></li>
  <li><code>.prev()</code></li>
  <li><code>.prevAll()</code></li>
  <li><code>.prevUntil()</code></li>
  <li><code>.siblings()</code></li>
</ul>

<h2 id="manipulation">Manipulation</h2>

<p>DOM에서 엘리먼트를 선택하고 탐색하는 것은 jQuery가 제공하는 것의 부분일 뿐이고, 또 다른 주요 부분은 일단 찾아낸 엘리먼트와 뭘 할 수있는 것인가이다. 가능한 것 중 하나는 이 엘리먼트들을 읽거나 추가하고, 속성이나 스타일을 변경하여 <a href="http://api.jquery.com/category/manipulation">조작</a>하는 것이다. 추가적으로 엘리먼트는 DOM 안에서 변경되고, 위치를 바꾸고, 제거하고, 새 엘리먼트를 추가하는 것 등을 할 수 있다. 전반적으로 엘리먼트를 조작하는 옵션은 매우 광대하다.</p>

<h3 id="getting--setting">Getting &amp; Setting</h3>

<p>주목해야힐 조작 매서드는 정보를 얻거나(<em>getting</em>) 혹은 설정하는(<em>setting</em>) 두 개의 지시자 중 하나로 사용된다는 것이 매우 일반적이다. 정보를 얻는다는 것은 가져올 정보 조각이 무엇인지를 결정하기 위해 매서드와 함께 실렉터를 사용하게 되는 것이다. 더불어 똑같은 실렉터와 매서드를 정보 조각을 설정하는 데에도 사용할 수 있다.</p>

<pre><code>// Gets the value of the alt attribute
$('img').attr('alt');

// Sets the value of the alt attribute
$('img').attr('alt', 'Wild kangaroo');
</code></pre>

<p>뒤따르는 예제와 스니핏에서, 매서드는 주로 설정 모드에서 사용되지만, getting 모드에서도 사용될 수 있다.</p>

<h3 id="attribute-manipulation">Attribute Manipulation</h3>

<p>검사되고 조작될 수 있는 엘리먼트의 한 부분은 속성이다. 몇 가지 선택사항은 속성이나 값을 추가, 제거, 변경할 수 있는 것이다. 아래 예제에서 <code>.addClass()</code> 매서드는 모든 짝수번 째의 <code>li</code> 항목에 클래스를 추가한다. <code>.removeClass()</code> 매서드는 모든 단락에서 클래스를 모두 제거하고 마지막으로 <code>.attr()</code> 매서드는 <code>abbr</code> 엘리먼트의 <code>title</code> 속성을 찾아서 그것을 <code>Hello World</code>로 설정한다.</p>

<pre><code>$('li:even').addClass('even-item');
$('p').removeClass();
$('abbr').attr('title', 'Hello World');
</code></pre>

<h4 id="attribute-manipulation-methods">Attribute Manipulation Methods</h4>

<ul>
  <li><code>.addClass()</code></li>
  <li><code>.attr()</code></li>
  <li><code>.hasClass()</code></li>
  <li><code>.prop()</code></li>
  <li><code>.removeAttr()</code></li>
  <li><code>.removeClass()</code></li>
  <li><code>.removeProp()</code></li>
  <li><code>.toggleClass()</code></li>
  <li><code>.val()</code></li>
</ul>

<h3 id="style-manipulation">Style Manipulation</h3>

<p>속성을 조작하는 것에 더해, 엘리먼트의 스타일도 다양한 매서드로 조작될 수 있다. 엘리먼트의 높이, 너비, 위치를 읽거나 설정할 때 몇몇 특정 매서드를 사용할 수 있고, <code>.css()</code> 매서드를 사용하면 어떤 CSS 스타일 변경도 다룰 수 있다.</p>

<p>특별히 <code>.css()</code> 매서드는 하나 또는 여러 개의 속성을 설정하거나, 각 변화에 대한 문법을 설정할 수 있다. 하나의 속성을 설정하려면 속성 이름과 값은 각각 따옴표와 쉼표로 분리되어야 한다. 여러 속성을 설정하려면 속성은 중괄호 안에 포함되어야 한다. 속성명은 캐멀케이스되어야 하고, 필요한 경우 하이픈은 제거된다. 그 뒤에 콜론과 인용부호로 감싼 값이 따른다. 속성과 값으로 짝지워진 각 쌍은 쉼표로 분리된다.</p>

<p>높이, 너비, 위치 매서드는 모두 픽셀값을 기본으로 하나, 다른 측정 단위도 사용될 수 있다. 아래에서 보여지듯이, 측정 단위를 변경하면 값 다음에 더하기 부호와 뒤따르는 인용부호된 측정단위를 사용하여 식별한다.</p>

<pre><code>$('h1 span').css('font-size', 'normal');
$('div').css({
  fontSize: '13px', 
  background: '#f60'
});
$('header').height(200);
$('.extend').height(30 + 'em');
</code></pre>

<h4 id="style-manipulation-methods">Style Manipulation Methods</h4>

<ul>
  <li><code>.css()</code></li>
  <li><code>.height()</code></li>
  <li><code>.innerHeight()</code></li>
  <li><code>.innerWidth()</code></li>
  <li><code>.offset()</code></li>
  <li><code>.outerHeight()</code></li>
  <li><code>.outerWidth()</code></li>
  <li><code>.position()</code></li>
  <li><code>.scrollLeft()</code></li>
  <li><code>.scrollTop()</code></li>
  <li><code>.width()</code></li>
</ul>

<h3 id="dom-manipulation">DOM Manipulation</h3>

<p>마지막으로, 엘리먼트의 위치를 변경하거나 추가하고 제거하고, 노골적으로 엘리먼트를 변경하여 DOM을 검사하고 조작할 수 있다. 여기서의 선택사항은 DOM 안에서 어떤 잠재적인 변화도 허용할 정도로 깊고 다양하다.</p>

<p>각 개개의 DOM 조작 매서드는 자신의 문법을 가지고 있지만, 아래 예에서 그 중 일부를 대강 설명해본다. <code>.prepend()</code> 매서드는 모든 <code>section</code>에 <code>h3</code> 엘리먼트를 새로 추가하고, <code>.after()</code> 매서드는 링크 바로 뒤에 <code>em</code> 엘리먼트를 새로 추가하며, <code>.text()</code> 매서드는 모든 <code>h1</code> 엘리먼트의 문자를 <code>Hello World</code>로 바꾼다.</p>

<pre><code>$('section').prepend('&lt;h3&gt;Featured&lt;/h3&gt;');
$('a[target="_blank"]').after('&lt;em&gt;New window.&lt;/em&gt;');
$('h1').text('Hello World');
</code></pre>

<h4 id="dom-manipulation-methods">DOM Manipulation Methods</h4>

<ul>
  <li><code>.after()</code></li>
  <li><code>.append()</code></li>
  <li><code>.appendTo()</code></li>
  <li><code>.before()</code></li>
  <li><code>.clone()</code></li>
  <li><code>.detach()</code></li>
  <li><code>.empty()</code></li>
  <li><code>.html()</code></li>
  <li><code>.insertAfter()</code></li>
  <li><code>.insertBefore()</code></li>
  <li><code>.prepend()</code></li>
  <li><code>.prependTo()</code></li>
  <li><code>.remove()</code></li>
  <li><code>.replaceAll()</code></li>
  <li><code>.replaceWith()</code></li>
  <li><code>.text()</code></li>
  <li><code>.unwrap()</code></li>
  <li><code>.wrap()</code></li>
  <li><code>.wrapAll()</code></li>
  <li><code>.wrapInner()</code></li>
</ul>

<h2 id="events">Events</h2>

<p>jQuery의 아름다움 중 하나는 벌어지는 특정 이벤트나 액션에서만 호출되는 매서드인 <a href="http://api.jquery.com/category/events/">이벤트 핸들러</a>를 쉽게 추가하는 수 있는 것이다. 예를 들어, 엘리먼트에 클래스를 추가하는 매서드를 클릭된 엘리먼트에서 발생되도록 설정될 수 있다.</p>

<p>아래에서 모든 <code>li</code> 항목을 잡아채는 표준 실렉터가 있다. <code>.click()</code> 이벤트 매서드는 <code>li</code> 아이템 실렉터에 구속되어 있으며(binding), <code>li</code> 아이템을 클릭할 때 발생되는 액션을 설정한다. <code>.click()</code> 이벤트 매서드 안에 실행될 액션을 보장하는 함수가 있다. 함수 바로 다음의 소괄호는 함수를 위한 패러미터(속성)를 전달할 수있으며, 이 예제에서는 <code>event</code> 객체가 사용되었다.</p>

<p>함수 안에 <code>.addClass()</code> 매서드가 구속된 또하나의 실렉터가 있다. 이제 <code>li</code> 항목이 클릭되면 <code>this</code> 키워드를 통해 <code>li</code> 항목은 <code>saved-item</code> 클래스를 받을 수 있다.</p>

<pre><code>$('li').click(function(event){
  $(this).addClass('saved-item');
});
</code></pre>

<h3 id="event-flexibility">Event Flexibility</h3>

<p><code>.click()</code> 이벤트 매서드는, 소수의 다른 이벤트 매서드와 함께, jQuery 1.7부터 도입된 <code>.on()</code> 매서드를 사용하는 숏핸드 매서드이다. <code>.on()</code> 매서드는, 페이지에 동적으로 추가되는 엘리먼트를 위한 자동 위임을 사용하여, 상당한 유연성을 제공한다. </p>

<p><code>.on()</code> 매서드를 이용하여 첫번째 인수는 네이티브 이벤트 이름이어야 하는 반면 두번째 인수는 이벤트 핸들러 함수이어야 한다. 이전의 예제를 살펴보면 <code>.on()</code> 매서드가 <code>.click()</code> 매서드의 자리에서 호출되고 있다. 이제 <code>click</code> 이벤트 이름은 전과 똑같이 자리잡은 이벤트 핸들러 함수와 함께 <code>.on()</code> 매서드 안에서 첫번째 인수로서 전달된다.</p>

<pre><code>$('li').on('click', function(event){
  $(this).addClass('saved-item');
});
</code></pre>

<h3 id="nesting-events">Nesting Events</h3>

<p>또 다른 하나 안에 하나를 품게함으로써 여러 개의 이벤트 핸들러와 트리거를 가질 수 있다. 예재로 <code>.on()</code> 이벤트 매서드 밑으로 <code>hover</code>  인수를 전달하여 <code>pagination</code> 클래스를 가진 엘리먼트 위를 호버할 때 호출될 수 있다. <code>.on()</code> 이벤트를 호출하면 <code>.click()</code> 아벤트 <code>up</code> ID를 가진 앵커를 호출된다.</p>

<pre><code>$('.pagination').on('hover', function(event){
  $('a#up').click();
});
</code></pre>

<h3 id="event-demo">Event Demo</h3>

<p>데모로서 경고 메시지를 사용하여 다음 코드 스니핏은 경고 메시지를 만들고나서 닫기 아이콘을 클릭하면 메시지를 제거하는 방법을 보여준다. </p>

<blockquote>
  <h6 id="html">HTML</h6>

  <pre><code>&lt;div class="alert-warning"&gt;
  &lt;strong&gt;Warning!&lt;/strong&gt; I’m about to lose my cool.
  &lt;div class="alert-close"&gt;×&lt;/div&gt;
&lt;/div&gt;
</code></pre>

  <h6 id="javascript">JavaScript</h6>

  <pre><code>$('.alert-close').on('click', function(event){
  $('.alert-warning').remove();
});
</code></pre>

  <h4 id="demohttpjmp19lrgr1"><a href="http://j.mp/19Lrgr1">Demo</a></h4>
</blockquote>

<h3 id="event-methods">Event Methods</h3>

<p>jQuery는 브라우저와 상호작용할 때 유저 행동을 등록하는 데에 기반을 둔 모든 매서드를 아주 많이 제공한다. 이런 매서드들은 아주 인기가 많지만 브라우저, 폼, 키보드, 마우스 등의 이벤트에 제한적이지 않은 꽤 많은 이벤트를 등록한다. 가장 인기있는 매서드들은 다음과 같다:</p>

<h4 id="browser-events">Browser Events</h4>

<ul>
  <li><code>.resize()</code></li>
  <li><code>.scroll()</code></li>
</ul>

<h4 id="document-loading">Document Loading</h4>

<ul>
  <li><code>.ready()</code></li>
</ul>

<h4 id="event-handler-attachment">Event Handler Attachment</h4>

<ul>
  <li><code>.off()</code></li>
  <li><code>.on()</code></li>
  <li><code>.one()</code></li>
  <li><code>jQuery.proxy()</code></li>
  <li><code>.trigger()</code></li>
  <li><code>.triggerHandler()</code></li>
  <li><code>.unbind()</code></li>
  <li><code>.undelegate()</code></li>
</ul>

<h4 id="event-object">Event Object</h4>

<ul>
  <li><code>event.currentTarget</code></li>
  <li><code>event.preventDefault()</code></li>
  <li><code>event.stopPropagation()</code></li>
  <li><code>event.target</code></li>
  <li><code>event.type</code></li>
</ul>

<h4 id="form-events">Form Events</h4>

<ul>
  <li><code>.blur()</code></li>
  <li><code>.change()</code></li>
  <li><code>.focus()</code></li>
  <li><code>.select()</code></li>
  <li><code>.submit()</code></li>
</ul>

<h4 id="keyboard-events">Keyboard Events</h4>

<ul>
  <li><code>.focusin()</code></li>
  <li><code>.focusout()</code></li>
  <li><code>.keydown()</code></li>
  <li><code>.keypress()</code></li>
  <li><code>.keyup()</code></li>
</ul>

<h4 id="mouse-events">Mouse Events</h4>

<ul>
  <li><code>.click()</code></li>
  <li><code>.dblclick()</code></li>
  <li><code>.focusin()</code></li>
  <li><code>.focusout()</code></li>
  <li><code>.hover()</code></li>
  <li><code>.mousedown()</code></li>
  <li><code>.mouseenter()</code></li>
  <li><code>.mouseleave()</code></li>
  <li><code>.mousemove()</code></li>
  <li><code>.mouseout()</code></li>
  <li><code>.mouseover()</code></li>
  <li><code>.mouseup()</code></li>
</ul>

<h2 id="effects">Effects</h2>

<p>이벤트와 버금가게, jQuery는 소수의 커스터마이징 가능한 효과도 제공한다. 이 효과들은 다양한 매서드로 행해지며, 컨텐츠를 보여주고 숨기고, 페이드 인/아웃, 슬라이드 업/다운 등을 위한 이벤트 매서드를 포함한다. 이들 모두가 사용될 매서드가 준비되어 있으며 최적으로 보이도록 커스터마이징될 수 있다.</p>

<p>각 이펙트 매서드는 자신만의 구문을 가지고 있어서, 각 매서드의 특정 구문은 jQuery <a href="http://api.jquery.com/category/effects/">효과 문서</a>를 참조하는 것이 가장 좋다. 그렇지만, 일반적으로 효과는 지속기간(duraton), 이징(easing 역자주: 움직일 때의 애니메이션 <a href="http://gsgd.co.uk/sandbox/jquery/easing/">효과</a>), 콜백함수(역자주 : 애니메이션이 끝난 후 실행되는 함수) 지정 등을 허용한다.</p>

<blockquote>
  <h4 id="jquery-css-animations">jQuery CSS Animations</h4>

  <p>CSS 자체가 최근 애니메이션을 다루는 것과는 관계가 좀 떨어지지만, 다양한 CSS 속성의 맞춤형 애니메이션이 jQuery에서 수행될 수 있다. CSS 애니메이션은 브라우저 처리 관점에서 더 나은 성능을 제공하며, 가능한 곳에선 더 선호된다. jQuery 애니메이션 효과는 - Modernizr의 도움을 받아 - CSS 애니메이션을 지원하는 브라우저에 완벽한 백업 솔루션을 만들어준다.</p>
</blockquote>

<h3 id="effect-duration">Effect Duration</h3>

<p>예로서 <code>.show()</code> 매서드를 사용하면, (선택적으로) 대입할 수 있는 첫 패러미터는 지속시간이며, 키워드와 밀리초 값을 사용해 수행될 수 있다. <code>slow</code> 키워드는 <code>600</code> 밀리초를, <code>fast</code> 키워드는 <code>200</code> 밀리초를 기본으로 한다. 키워드 값을 사용하는 건 완벽하지만, 밀리초 값을 직접 대입할 수도 있다. 키워드 값은 인용부호로 감싸지만, 밀리초 값은 그러지 않는다.</p>

<pre><code>$('.error').show();
$('.error').show('slow');
$('.error').show(500);
</code></pre>

<h3 id="effect-easing">Effect Easing</h3>

<p>지속시간을 설정함과 더불어, 애니메이션 안에서 다양한 시간 동안 애니메이션이 처리되는 이징(easing) 혹은 속도 등도 설정될 수 있다. 기본적으로 jQuery는 두 개의 이징 키워드 값이 있다. 기본값은 <code>swing</code>이고 추가적인 값은 <code>linear</code>이다. 기본 <code>swing</code> 값은 느린 속도로 애니메이션을 시작하여 애니메이션 되는 중에 속도를 내지만, 끝나기 전에는 속도를 늦춘다. <code>linear</code> 값은 처움부터 끝까지 하나의 일정한 속도로 애니메이션이 진행된다.</p>

<pre><code>$('.error').show('slow', 'linear');
$('.error').show(500, 'linear');
</code></pre>

<blockquote>
  <h4 id="jquery-ui">jQuery UI</h4>

  <p>jQuery에서 제공되는 두 개의 이징 값은 추가적인 값을 제공할 수 있는 다양한 플러그인을 사용하여 확장될 수 있다. 가장 인기있는 플러그인 중 하나는 <a href="http://jqueryui.com/">jQuery UI</a> 이다.</p>

  <p>새 이징 값에 더해 jQuery UI는 살펴볼만한 소수의 다른 상호작용, 효과, 위젯과 도움되는 리소스를 제공한다.</p>
</blockquote>

<h3 id="effect-callback">Effect Callback</h3>

<p>애니메이션이 끝나면 콜백 함수라 불리는 또 다른 함수를 실행할 수 있다. 콜백 함수는, 존재한다면, 지속시간(duration)이나 이징(easing) 뒤에 배치해야 한다. 이 함수에서 새로운 이벤트나 효과가 배치될 수 있으며, 각각 자신의 필요한 구문을 따른다.</p>

<pre><code>$('.error').show('slow', 'linear', function(event){
  $('.error .status').text('Continue');
});
</code></pre>

<h3 id="effect-syntax">Effect Syntax</h3>

<p>전에 언급되었듯이 각 효과 매서드는 jQuery <a href="http://api.jquery.com/category/effects/">효과 문서</a>에서 찾을 수 있는 자신의 구문을 가진다. 여기서 약술한 지속시간, 이징, 콜백 매개변수는 일반적인 것이고 모든 매서드에서 쓸 수 있는 것은 아니다. 관련해서 의문 사항이 생기면 매서드의 구문을 재검토하는 것이 가장 좋다.</p>

<h3 id="effects-demo">Effects Demo</h3>

<p>위에서와 같은 이벤트 데모를 취하면, 여기서 <code>.remove()</code> 매서드는 <code>.fadeOut()</code> 매서드에서 콜백 함수의 부분으로 사용된다. <code>.fadeOut()</code> 매서드를 사용하면 경고 메시지가 재빨리 사라지기 보단 점차로 페이드 아웃되게 하며, 애니메이션이 완료된 후 DOM에서 제거된다.</p>

<blockquote>
  <h6 id="html-1">HTML</h6>

  <pre><code>&lt;div class="alert-warning"&gt;
  &lt;strong&gt;Warning!&lt;/strong&gt; I’m about to lose my cool.
  &lt;div class="alert-close"&gt;×&lt;/div&gt;
&lt;/div&gt;
</code></pre>

  <h6 id="javascript-1">JavaScript</h6>

  <pre><code>$('.alert-close').on('click', function(event){
  $('.alert-warning').fadeOut('slow', function(event){
    $(this).remove();
  });
});
</code></pre>

  <h4 id="demohttpjmpzexzyb"><a href="http://j.mp/ZExZyB">Demo</a></h4>
</blockquote>

<h4 id="basic-effects">Basic Effects</h4>

<ul>
  <li><code>.hide()</code></li>
  <li><code>.show()</code></li>
  <li><code>.toggle()</code></li>
</ul>

<h4 id="custom-effects">Custom Effects</h4>

<ul>
  <li><code>.animate()</code></li>
  <li><code>.clearQueue()</code></li>
  <li><code>.delay()</code></li>
  <li><code>.dequeue()</code></li>
  <li><code>jQuery.fx.interval</code></li>
  <li><code>jQuery.fx.off</code></li>
  <li><code>.queue()</code></li>
  <li><code>.stop()</code></li>
</ul>

<h4 id="fading-effects">Fading Effects</h4>

<ul>
  <li><code>.fadeIn()</code></li>
  <li><code>.fadeOut()</code></li>
  <li><code>.fadeTo()</code></li>
  <li><code>.fadeToggle()</code></li>
</ul>

<h4 id="sliding-effects">Sliding Effects</h4>

<ul>
  <li><code>.slideDown()</code></li>
  <li><code>.slideToggle()</code></li>
  <li><code>.slideUp()</code></li>
</ul>

<blockquote>
  <h3 id="slide-demo">Slide Demo</h3>

  <h6 id="html-2">HTML</h6>

  <pre><code>&lt;div class="panel"&gt;
  &lt;div class="panel-stage"&gt;&lt;/div&gt;
  &lt;a href="#" class="panel-tab"&gt;Open &lt;span&gt;▼&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;
</code></pre>

  <h6 id="javascript-2">JavaScript</h6>

  <pre><code>$('.panel-tab').on('click', function(event){
  event.preventDefault();
  $('.panel-stage').slideToggle('slow', function(event){
    if($(this).is(':visible')){
      $('.panel-tab').html('Close ▲');
    } else {
      $('.panel-tab').html('Open ▼');
    }
  });
});
</code></pre>

  <h4 id="demohttpjmp11cl156"><a href="http://j.mp/11Cl156">Demo</a></h4>
</blockquote>

<h3 id="tabs-demo">Tabs Demo</h3>

<blockquote>
  <h6 id="html-3">HTML</h6>

  <pre><code>&lt;ul class="tabs-nav"&gt;
  &lt;li&gt;&lt;a href="#tab-1"&gt;Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#tab-2"&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="tabs-stage"&gt;
  &lt;div id="tab-1"&gt;...&lt;/div&gt;
  &lt;div id="tab-2"&gt;...&lt;/div&gt;
&lt;/div&gt;
</code></pre>

  <h6 id="javascript-3">JavaScript</h6>

  <pre><code>// Show the first tab by default
$('.tabs-stage div').hide();
$('.tabs-stage div:first').show();
$('.tabs-nav li:first').addClass('tab-active');
// Change tab class and display content
$('.tabs-nav a').on('click', function(event){
  event.preventDefault();
  $('.tabs-nav li').removeClass('tab-active');
  $(this).parent().addClass('tab-active');
  $('.tabs-stage div').hide();
  $($(this).attr('href')).show();
});
</code></pre>

  <h4 id="demohttpjmp1052yx1"><a href="http://j.mp/1052YX1">Demo</a></h4>
</blockquote>

<h2 id="resources-amp-links">Resources &amp; Links</h2>

<ul>
  <li><a href="http://jsforcats.com/">JavaScript For Cats</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/A_re-introduction_to_JavaScript">A Re-introduction to JavaScript</a> via Mozilla Developer Network</li>
  <li><a href="https://tutsplus.com/course/30-days-to-learn-jquery/">30 Days to Learn jQuery</a> via Tuts+ Premium</li>
  <li><a href="https://developers.google.com/speed/libraries/devguide">Google Hosted Libraries</a></li>
  <li><a href="http://docs.jquery.com/">jQuery Documentation</a></li>
  <li><a href="http://jqfundamentals.com/">jQuery Fundamentals</a> via Bocoup</li>
  <li><a href="http://jqueryui.com/">jQuery UI</a></li>
</ul>

<h3 id="section">역자참조링크</h3>
<ul>
  <li><a href="http://www.jquerykorea.pe.kr/xe/?mid=document&amp;CT=All">jQuery API 한글 번역</a></li>
  <li><a href="http://direct.co.kr/cs/jQuery.pdf">한글 jQuery 시리즈 강좌 리스트 : PDF와 동영상 링크</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML & CSS 중급자 가이드 - 4강 : 반응형 웹 디자인]]></title>
    <link href="http://nolboo.github.io/blog/2013/07/22/advanced-guide-to-html-and-css-4-slash-10/"/>
    <updated>2013-07-22T21:20:00+09:00</updated>
    <id>http://nolboo.github.io/blog/2013/07/22/advanced-guide-to-html-and-css-4-slash-10</id>
    <content type="html"><![CDATA[<p>원본 : <a href="http://learn.shayhowe.com/advanced-html-css/responsive-web-design">An Advanced Guide to HTML &amp; CSS - LESSON 4 : Responsive Web Design</a></p>

<p>인터넷은 누구도 예측할 수 없을 정도로 빠르게, 미친듯이 성장했다. 최근 수 년간 모바일 성장이 현장에서 폭발하고 있다. 모바일 인터넷 사용의 성장도 일반 인터넷 사용의 성장을 훨씬 뛰어넘고 있다.</p>

<p>요즘 인터넷에 연결되는 모바일 기기를 하나 이상 갖고 있지 않은 사람을 찾는 것은 힘들다. 영국에선 인구보다 <a href="http://www.gpmd.co.uk/blog/2012-mobile-internet-statistics/">모바일 폰</a>이 더 많고, 모바일 인터넷 사용이 데스크탑 인터넷 사용을 올해 추월하는 <a href="http://www.digitalbuzzblog.com/2011-mobile-statistics-stats-facts-marketing-infographic/">트랜드가 이어지고 있다</a>.</p>

<p>모바일 인터넷 사용이 계속 성장하면서 어떻게 모든 유저에게 적합한 웹사이트를 만들 것인가 하는 질문이 제기되고있다. 업계는 이 질문에 반응형 웹 디자인(responsive web design : RWD로 응답하고 있다.
<!-- more --></p>

<h2 id="responsive-overview">Responsive Overview</h2>

<p>반응형 웹 디자인은 모바일 혹은 데스트탑의 모든 기기와 크고 작은 모든 스크린 사이즈에서 적절하게 작동하는 웹사이트를 만드는 것이다.</p>

<p>반응형 웹 디자인은 모든 사람에게 직관적이고 만족스런 경험을 제공하는 것에 초점을 두며, 데스크탑 유저와 폰 유저 모두에게 같은 이익을 제공한다.</p>

<p>반응형 웹 디자인<a href="http://www.alistapart.com/articles/responsive-web-design/">responsive web design</a> 용어는 Ethan Marcotte가 만들어냈고 주로 키웠다. 이 강의에서 다루는 많은 것은 Ethan 온라인과 그의 책 <a href="http://www.abookapart.com/products/responsive-web-design/">Responsive Web Design</a>에서 먼저 이야기된 것이다.</p>

<p><img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/food-sense.png" alt="Food Sense Responsive Layout" /></p>

<p><strong>Fig. 4.01</strong> </p>

<p><a href="http://foodsense.is/">Food Sense</a>는 아름다운 웹사이트이며, 모든 다른 뷰포트 사이즈에 반응한다. 크건 작건 뷰포트에 웹사이트가 조절되어 자연스런 사용자 경험을 만든다.</p>

<p>역자 참조 링크</p>

<ul>
  <li><a href="http://www.w3.org/TR/CSS2/visuren.html#viewport">Viewport</a> : 화면의 창 또는 보이는 영역</li>
</ul>

<h3 id="responsive-vs-adaptive-vs-mobile">Responsive vs. Adaptive vs. Mobile</h3>

<p><em>Responsive</em>(반응형) 와 <em>adaptive</em>(적응형) 웹 디자인은 밀접하게 연관되며, 종종 같은 의미로 사용된다. 반응형은 일반적으로 어떤 변화에도 빠르고 적극적으로 반응하는 것을 의미하는 반면 적응형은 (<em>변화</em>와 같은) 새로운 목적이나 상황에 쉽게 변경되는 것을 의미한다. 반응형 디자인에서는 웹사이트가 뷰포트 너비와 같은 요인에 지속적으고 유동적으로 변하지만, 적응형 웹사이트는 미리 정해진 요인들에 맞추어 만들어진다. 두 가지의 결합이 이상적이며, 기능적 웹사이트를 위한 완벽한 공식을 제공한다. 어떤 용어가 사용되는가가 특별히 커다란 차이를 만들지는 않는다.</p>

<p><em>Mobile</em>은 일반적으로 모바일 유저만을 위한 새 도메인에 별도의 웹사이트를 만드는 것을 의미한다. 모바일 웹사이트는 극도로 가벼울 수 있지만 새 코드 베이스와 브라우저 스니핑에 의존한다. 이는 개발자와 유저 모두에게 장애물이 될 수 있다.</p>

<p>역자 주 - <a href="http://en.wikipedia.org/wiki/Browser_sniffing">Browser sniffing</a> : 유저의 브라우저가 어떤 것인지 판별하는 것</p>

<p>현재 가장 인기있는 기술은 다른 브라우저와 기기 뷰포트에 따라 레이아웃과 컨텐츠가 변하면서 생동적으로 적응하는 디자인을 선호하는 반응형 웹 디자인에 있다. 이러 해법은 반응형, 적응형과 모바일 모두의 이점을 가지고 있다.</p>

<h2 id="flexible-layouts">Flexible Layouts</h2>

<p>반응형 웹 디자인은 가변(flexible) 레이아웃, 미디어 쿼리, 가변(flexible) 미디어의 세 가지 주요 부분으로 나뉜다.  첫번째 부분인 가변 레이아웃은 어떠한 너비에도 생동적으로 재조정할 수 있는 가변 그리드로 웹 사이트의 레이아웃을 만드는 것이다. 가변 그리드는 대부분 퍼센트나 <code>em</code> 등의 상대적인 길이 단위를 사용한다. 이 상대적인 길이들은 <code>width</code>, <code>margin</code>, <code>padding</code>과 같은 일반적인 그리드 속성값으로 사용된다.</p>

<h4 id="relative-viewport-lengths">Relative Viewport Lengths</h4>

<p>CSS3에서는 몇 개의 새로운 상대 길이 단위가 <a href="http://dev.w3.org/csswg/css3-values/#viewport-relative-lengths">도입되었다</a>. 이는 브라우저나 디바이스의 뷰포트 크기와 특히 관련된 것이며, <code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code> 등을 포함한다. 이러한 새로운 단위들에 대한 전체적인 지원은 훌륭하진 않으나 확대되고 있고, 조만간 반응형 웹사이트를 만드는 데에 커다란 역할을 하는 것이다.</p>

<ul>
  <li><code>vw</code>        : Viewports width</li>
  <li><code>vh</code>        : Viewports height</li>
  <li><code>vmin</code>  : Minimum of the viewport’s height and width</li>
  <li><code>vmax</code>  : Maximum of the viewport’s height and width</li>
</ul>

<p>가변 레이아웃은 픽셀이나 인치와 같은 고정 측정 단위를 지원하지 않는다. 기기마다 뷰포트 높이와 너비가 지속적으로 변하기 때문이다. 웹사이트 레이아웃은 이런 변화에 적응할 필요가 있으며 고정 값은 너무 많은 제약이 있다. 다행히 Ethan이 상대값을 사용한 가변 레이아웃의 비율을 선언하는 것을 도와주는 쉬운 공식을 밝혀냈다.</p>

<p>그 공식은 엘리먼트의 목표(target) 너비를 부모 엘리먼트의 너비로 나누어 목표 엘리먼트의 상대적인 너비를 구하는 것이다.</p>

<pre><code>반응형 디자인 공식 : target ÷ context = result
</code></pre>

<h3 id="flexible-grid">Flexible Grid</h3>

<p>이 공식이 두 열(column) 레이아웃 안에서 어떻게 동작하는지 보자. 아래에서 <code>container</code> 클래스의 부모 <code>div</code>가 <code>section</code>과 <code>aside</code> 엘리먼트를 감싸고 있다. <code>section</code>을 왼쪽으로 <code>aside</code>를 오른쪽으로 위치하면서 둘 사이에 같은 마진을 갖게하는 것이 목표다. 보통 이러한 레이아웃의 마크업과 스타일은 다음과 유사할 것이다.</p>

<h6 id="html">HTML</h6>

<pre><code>&lt;div class="container"&gt;
  &lt;section&gt;...&lt;/section&gt;
  &lt;aside&gt;...&lt;/aside&gt;
&lt;/div&gt;
</code></pre>

<h6 id="css">CSS</h6>

<pre><code>.container {
  width: 660px;
}
section {
  float: left;
  margin: 10px;
  width: 420px;
}
aside {
  float: right;
  margin: 10px;
  width: 200px;
}
</code></pre>

<h4 id="fixed-grid-demohttplearnshayhowecomadvanced-html-cssresponsive-web-designfixed-grid-demo"><a href="http://learn.shayhowe.com/advanced-html-css/responsive-web-design#fixed-grid-demo">Fixed Grid Demo</a></h4>

<p>가변 그리드 공식을 사용하여 길이의 고정 단위를 상대 단위로 변경할 수 있다. 이 예제에선 퍼센트를 사용하겠지만 <code>em</code> 단위도 동일하게 작동할 것이다. 부모 <code>container</code>의 너비에 상관없이 <code>section</code>과 <code>aside</code>의 마진과 너비는 비율적으로 크기가 변동될 것이다.</p>

<pre><code>.container {
  max-width: 660px;
}
section {
  float: left;
  margin: 1.51515151%;   /*  10px ÷ 660px = .01515151 */
  width: 63.63636363%;   /* 420px ÷ 660px = .63636363 */   
}
aside {
  float: right;
  margin: 1.51515151%;   /*  10px ÷ 660px = .01515151 */
  width: 30.30303030%;   /* 200px ÷ 660px = .30303030 */
}
</code></pre>

<h4 id="flexible-grid-demohttplearnshayhowecomadvanced-html-cssresponsive-web-designflexible-grid-demo"><a href="http://learn.shayhowe.com/advanced-html-css/responsive-web-design#flexible-grid-demo">Flexible Grid Demo</a></h4>

<p>가변 레이아웃 개념과 공식을 갖고 그리드의 모든 부분에 재적용하면 완벽하게 동적인 웹사이트를 만들 수 있다. 위의 부모 <code>container</code>에서 했듯이 <code>min-width</code>, <code>max-width</code>, <code>min-height</code>, <code>max-height</code> 속성을 수단으로 가변 레이아웃에서 훨씬 더 많은 컨트롤을 할 수 있다.</p>

<p>가변 레이아웃 접근법만으론 충분치 않다. 브라우저 뷰포트의 너비가 너무 작을 때는 레이아웃의 크기를 비율적으로 조절하더라도 열의 크기가 너무 작아 컨텐츠를 효과적으로 표시할 수 없다. 레이아웃이 너무 작거나 크면 텍스트는 읽기 어렵게 되고, 레이아웃이 깨지기 시작할 것이다. 이런 경우엔 미디어 쿼리가 더 나은 경험을 만드는데 도움이 될 수 있다.</p>

<h2 id="media-queries">Media Queries</h2>

<p>미디어 쿼리는 개별 브라우저와 디바이스 환경(예를 들면 뷰포트 너비 혹은 기기 오리엔테이션 등)에 각기 다른 스타일을 제공할 수 있는 확장 기능이다. <a href="http://css-tricks.com/css-media-queries/">타겟 스타일</a>을 독자적으로 제공할 수 있다는 것은 반응형 웹 디자인에 기회과 수단의 세계를 활짝 열어준다.</p>

<h3 id="initializing-media-queries">Initializing Media Queries</h3>

<p>미디어 쿼리를 사용하는 방법은 두 가지가 있다. 기존의 스타일 시트에 <code>@media</code> 룰을 사용하고 <code>@import</code> 룰을 사용하여 새로운 스타일 시트를 들여오거나(import), HTML 문서 안에서 별도의 스타일을 링크하는 것이다. 일반적으로 추가적인 HTTP 요청을 피하기 위해 기존 스타일 시트안에 <code>@media</code> 룰을 사용하는 것이 추천된다.</p>

<h6 id="html-1">HTML</h6>

<pre><code>&lt;!-- Separate CSS File --&gt;
&lt;link href="styles.css" rel="stylesheet" 
media="all and (max-width: 1024px)"&gt;
</code></pre>

<h6 id="css-1">CSS</h6>

<pre><code>/* @media Rule */
@media all and (max-width: 1024px) {...}

/* @import Rule */
@import url(styles.css) all and (max-width: 1024px) {...}
</code></pre>

<p>각 미디어 쿼리는 하나 또는 그 이상의 표현이 뒤따르는 미디어 타입을 포함할 수 있다. 일반적인 미디어 타입은 <code>all</code>, <code>screen</code>, <code>print</code>, <code>tv</code>, <code>braille</code>을 포함한다. HTML5 사양(specifition)은 <code>3d-glasses</code>도 포함하는 새로운 미디어 타입을 포함한다. 미디어 타입을 명시하지 않으면 미디어 쿼리는 미디어 타입을 <code>screen</code>으로 기본으로할 것이다.</p>

<p>미디어 쿼리 표현식은 다른 미디어 특성과 값을 포함할 수 있으며 그리고나서 참(true) 혹은 거짓(false)를 할당한다. 미디어 특성과 값이 참으로 할당될 때 해당 스타일이 적용되며, 거짓이면 해당 스타일은 무시된다.</p>

<h3 id="logical-operators-in-media-queries">Logical Operators in Media Queries</h3>

<p>미디어 쿼리에서 논리적 연산자(logical operator)는 강력한 표현식을 만들 수 있게 해준다. <code>and</code>, <code>not</code>, <code>only</code>의 세 개의 연산자를 사용할 수 있다.</p>

<p><code>and</code> 논리 연산자를 사용하여 브라우저나 기기가 a,b,c 등으로 지정하여 추가적인 조건을 추가할 수 있다. 여러 개의 개별 미디어 쿼리는 콤마로 분리될 수 있으며 암묵적인 <code>or</code> 연산자처럼 동작한다. 아래 예는 <code>800</code>과 <code>1024</code> 픽셀 너비의 모든 미디어 타입을 선택한다.</p>

<pre><code>@media all and (min-width: 800px) and (max-width: 1024px) {...}
</code></pre>

<p><code>not</code> 논리 연산자는 명시된 것을 제외한 모든 쿼리를 특정하여 선언된 쿼리를 부정한다. 아래 예에서는 표현식은 컬러 스크린을 갖지 않는 모든 디바이스에 적용된다. 즉, 흑백이나 모노 스크린에 적용된다.</p>

<pre><code>@media not screen and (color) {...}
</code></pre>

<p><code>only</code> 논리 연산자는 새로운 연산자이며 HTML4 알고리즘을 사용하는 유저 에이전트로는 인식되지 않으므로, 미디어 쿼리를 지원하는 않는 기기나 브라우저에선 스타일이 나타나지 않는다. 아래에서 표현식은 세로 편향(portrait orientation)인 스크린만을 선택한다.</p>

<pre><code>@media only screen and (orientation: portrait) {...}
</code></pre>

<blockquote>
  <h4 id="omitting-a-media-type">Omitting a Media Type</h4>

  <p><code>not</code>과 <code>only</code> 논리 연산자를 사용할 땐 미디어 타입을 쓰지 않을 수 있다. 이 경우 미디어 타입은 <code>all</code>로 전제된다.</p>
</blockquote>

<h3 id="media-features-in-media-queries">Media Features in Media Queries</h3>

<p>미디어 쿼리 문법과 논리 연산자의 작동법을 아는 것은 미디어 쿼리에 대한 훌륭한 입문이나, 실제 작업은 미디어 특성과 함께 한다. 미디어 쿼리 표현식 내에서 어떤 속성이 목표될지를 미디어 특성이 지정한다.</p>

<h4 id="height--width-media-features">Height &amp; Width Media Features</h4>

<p>가장 많이 사용되는 미디어 특성 중 하나는 하나의 디바이스나 브라우저 뷰포트에 하나의 높이나 너비를 결정하는 것에 관련된다. <code>height</code>, <code>width</code>, <code>device-height</code>, <code>device-width</code>의 미디어 특성을 사용해서 높이와 너비는 찾을 수 있다. 각 미디어 특성은 <code>min</code> 혹은 <code>max</code> 수식어로 접두될 수 있어 <code>min-width</code> 혹은 <code>max-device-width</code>과 같은 특성을 만들 수 있다.</p>

<p><code>height</code>와 <code>width</code> 특성은 (브라우저 창과 같은) 뷰포트 렌더링 영역의 높이와 너비에 기반하며, 한편 <code>device-height</code>와 <code>device-width</code> 특성은 (실제 렌더링 영역보다 더 클 수 있는) 출력 기기의 높이와 너비에 기반한다. 이 높이와 너비 미디어 특성 값은 (상대적이거나 절대적인) 어떠한 길이 값도 될 수 있다.</p>

<pre><code>@media all and (min-width: 320px) and (max-width: 780px) {...}
</code></pre>

<p>반응형 디자인에서는 <code>min-width</code>과 <code>max-width</code>를 포함하는 특성이 가장 많이 사용된다. 이것들은 기기 특성에 혼동을 피해 데스크탑과 모바일 기기에 동일하게 반응형 웹사이트를 만드도록 해준다.</p>

<blockquote>
  <h4 id="using-minimum--maximum-prefixes">Using Minimum &amp; Maximum Prefixes</h4>

  <p><code>min</code>과 <code>max</code> 접두어는 꽤 많은 미디어 특성에서 사용될 수 있다. <code>min</code> 접두어는 보다 크거나 같은 값을 가리키며, <code>max</code> 접두어는 더 적거나 같은 값을 가리킨다. <code>min</code>과  <code>max</code> 접두어는 일반적인 HTML 문법과 충돌되지 않아 특별히 꺽쇠 심볼을 사용하지 않는다.</p>
</blockquote>

<h4 id="orientation-media-feature">Orientation Media Feature</h4>

<p><code>orientation</code> 미디어 특성은 기기가 <code>landscape</code>나 <code>portrait</code> 편향(orientation)인지를 결정한다. <code>landscape</code> 모드는 화면이 가로 모드일 때, <code>portrait</code> 모드는 화면이 세로 모드일 때이며, 모바일 기기에서 널리 사용된다.</p>

<pre><code>@media all and (orientation: landscape) {...} 
</code></pre>

<h4 id="aspect-ratio-media-features">Aspect Ratio Media Features</h4>

<p><code>aspect-ratio</code>와 <code>device-aspect-ratio</code> 특성은 목표 렌더링 영역 혹은 출력 기기의 <code>width/height</code> 픽셀 비율을 지정한다. <code>min</code>와 <code>max</code> 접두어가 사용될 수 있다.</p>

<p>종횡비(aspect ratio) 값은 /로 분리되는 두 개의 양의 정수로 구성된다. 첫 정수는 픽셀 너비를, 두번째 정수는 픽셀 높이이다.</p>

<pre><code>@media all and (min-device-aspect-ratio: 16/9) {...}
</code></pre>

<blockquote>
  <h4 id="pixel-ratio-media-features">Pixel Ratio Media Features</h4>

  <p>종횡비 특성에 더해 <code>pixel-ratio</code> 미디어 특성도 있다. 이 특성은 <code>device-pixel-ratio</code> 특성을 포함하며, <code>min</code>과 <code>max</code> 접두어도 가진다. 특히 픽셀비 특성은 레티나 디스플레이와 같은 고해상도 기기를 지정할 때 훌륭하며, 다음처럼 보여질 것이다.</p>

  <p>   @media only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3) {…}</p>
</blockquote>

<h4 id="resolution-media-feature">Resolution Media Feature</h4>

<p><code>resolution</code> 미디어 특성은 DPI(dots per inch)로 알려진 픽셀 밀도로 출력 기기의 해상도를 지정한다. <code>min</code>과 <code>max</code>를 접두할 수 있다. 게다가 <code>resolution</code> 미디어 속성은 dots per pixel (<code>1.3dppx</code>), dots per centimeter (<code>118dpcm</code>)와 같은 길이 기반 해상도 값을 가질 수도 있다.</p>

<pre><code>@media print and (min-resolution: 300dpi) {...}
</code></pre>

<h4 id="other-media-features">Other Media Features</h4>

<p><code>color</code>, <code>color-index</code>, <code>monochrome</code> 특성은 출력 색상을, <code>grid</code> 특성은 비트맵 기기를, <code>scan</code> 특성은 텔레비전의 스캐닝 처리를 지정하며, 자주 사용하지는 않지만 필요할 땐 도움이 된다.</p>

<blockquote>
  <h4 id="media-query-browser-support">Media Query Browser Support</h4>

  <p>불행하게도 미디어 쿼리는 인터넷 익스플로러 8 이하와 고전적인 브라우저에서는 작동하지 않는다. 그러나, 자바스크립트로 쓰여진 두 개의 알맞는 땜빵(polyfill)이 있다.</p>

  <p><a href="https://github.com/scottjehl/Respond/">Respond.js</a>는 min/max-witdh 타입만을 위한 가벼운 땜빵이며, 미디어 쿼리 타입만 사용된다면 완벽하다. <a href="http://code.google.com/p/css3-mediaqueries-js/">CSS3-MediaQueries.js</a>는 더 많이 개발되고 더 무겁지만 더 복잡한 미디어 쿼리의 더 큰 배열을 지원하는 땜빵이다. 추가적으로 어떠한 땜빵이라도 성능 문제를 가져올 수 있으며, 잠재적으로 웹사이트를 느리게 할 수 있다는 것을 명심해야한다. 주어진 땜빵이 성능과 맞바꿀만한지 확인해야한다.</p>
</blockquote>

<h3 id="media-queries-demo">Media Queries Demo</h3>

<p>이제 미디어 쿼리를 사용하여 전에 만들었던 가변 레이아웃을 다시 코딩하자. 데모의 현재 문제점 중 하나는 <code>aside</code>가 아주 작은 뷰포트에서 사용할 수 없을 정도로 작아진다는 것이다. <code>420</code> 픽셀 너비 아래의 뷰포트를 위해 미디어 쿼리를 추가하여 <code>float</code>를 꺼버리고 <code>section</code>과 <code>aside</code>의 너비를 변화시키는 레이아웃으로 변경할 수 있다.</p>

<pre><code>@media all and (max-width: 420px) {
  section, aside {
    float: none;
    width: auto;
  }
}
</code></pre>

<p><strong>Fig. 4.02</strong> 미디어 쿼리 없이는 <code>section</code>과 <code>aside</code> 너무 작아 진다. 너무 작아서 어떤 실제 컨텐츠도 담을 수 없다.
<img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/without-media-queries.png" alt="Demo without Media Queries" /></p>

<p><strong>Fig. 4.03</strong> 미디어 쿼리를 사용하여 <code>float</code>를 제거하고 너비를 변경하면, <code>section</code>과 <code>aside</code>가 뷰포트 전체 너비를 차지하고 기존의 컨텐츠에 충분한 공간이 생겼다.
<img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/with-media-queries.png" alt="Demo with Media Queries" /></p>

<blockquote>
  <h4 id="identifying-breakpoints">Identifying Breakpoints</h4>

  <p>당신의 직관이 각기 다른 기기 해상도로 결정되는 공통적인 뷰포트 사이즈의 미디어 쿼리 분기점(<code>320px</code>, <code>480px</code>, <code>768px</code>, <code>1024px</code>, <code>1224px</code> 등)을 쓸지도 모르겠다. 그러나 이건 <strong>나쁜</strong> 아이디어이다.</p>

  <p>반응형 웹사이트를 만들 때는 기기만아니라 다른 뷰포트 사이즈의 배열에 맞추어 조정되어야 한다. 웹사이트가 깨지거나 이상하게 보이기 시작할 때 혹은 경험이 방해받을 때에만 분기점(breakpoint)이 도입되어야 한다.</p>

  <p>게다가 새로운 기기와 해상도는 항상 출시된다. 이러한 변화를 따라가려는 것은 끝없는 과정일 수 있다.</p>
</blockquote>

<h2 id="mobile-first">Mobile First</h2>

<p>미디어 쿼리와 함께 가장 인기있는 기술은 <em>mobile first</em>로 불리우는 것이다. <a href="http://www.lukew.com/presos/preso.asp?26">mobile first</a> 접근법은 작은 뷰포트의 스타일을 기본 웹사이트 스타일로 한 다음 뷰포트가 커짐에 따른 스타일을 추가하기위해 미디어 쿼리를 사용한다.</p>

<p>모바일 퍼스트 디자인의 배경에서 작동되는 믿음은 일반적으로 더 작은 뷰포트를 사용하는 모바일 기기 유저는 모바일 스타일을 덮어쓰기만을 위해 테스크탑 스타일을 로드할 필요가 없다는 것이다. 그렇게 하는 것은 대역폭(bandwidth)의 낭비이다. 쾌적한 웹사이트를 기대하는 어떤 유저에게도 귀중한 대역폭 말이다.</p>

<p>모바일 퍼스트 접근법은 모바일 유저의 제한을 염두에 두고 디자인하는 것을 지원하기도 한다. 오래 전에 인터넷 소비의 태반이 모바일 기기로 이루어질 것으로 예상되었다. 적절하게 그것을 계획하고 본질적인 모바일 경험을 개발하라.</p>

<p>모바일 퍼스트 미디어 쿼리는 다음과 같을 것이다.</p>

<pre><code>/* Default styles first then media queries */
@media screen and (min-width: 400px)  {...}
@media screen and (min-width: 600px)  {...}
@media screen and (min-width: 1000px) {...}
@media screen and (min-width: 1400px) {...}
</code></pre>

<p>불필요한 미디어를 다운로드하는 것은 미디어 쿼리를 사용하여 중지시킬 수 있다. 일반적으로 모바일 스타일에서 CSS3 그림자, 그라디언트, 변형(transform), 애니메이션 등을 피하는 것은 나쁜 아이디어가 아니다. 지나치게 사용되면 로딩이 무겁게되고, 기기의 배터리를 빨리 닳게할 수도 있다.</p>

<pre><code>/* Default media */
body {
  background: #ddd;
}
/* Media for larger devices */
@media screen and (min-width: 800px) {
  body {
    background-image: url("bg.png") 50% 50% no-repeat;
  }
}
</code></pre>

<h3 id="mobile-first-demo">Mobile First Demo</h3>

<p>이전 예제에 미디어 쿼리를 추가하면 <code>420</code> 픽셀 너비 미만에서 더 나은 레이아웃을 얻기위해 약간의 스타일을 겹쳐쓰자. 모바일 스타일 퍼스트를 기본으로 사용하기 위해 코드를 다시 쓰고 <code>420</code> 픽셀 이상의 뷰포트에 맞추기 위해 미디어 쿼리를 추가하면 다음과 같다.</p>

<p><a href="http://learn.shayhowe.com/courses/advanced-html-css/responsive-web-design/responsive-web-design-demo.html">View this code in action.</a></p>

<pre><code>section, aside {
  margin: 1.51515151%;
}
@media all and (min-width: 420px) {
  .container {
    max-width: 660px;
  }
  section {
    float: left;
    width: 63.63636363%;
  }
  aside {
    float: right;
    width: 30.30303030%;
  }
}
</code></pre>

<p>코드 양이 전과 같음을 주목하라. 여기서 유일한 예외는 모바일 기기는 <strong>하나의</strong> CSS 선언만 렌더링해야만 한다는 것이다. 뒤따르는 나머지 스타일은 더 큰 뷰포트에서만 로드되고 어떤 선행 스타일을 겹쳐쓰지 않는다.</p>

<h2 id="viewport">Viewport</h2>

<p>요사이 모비일 기기는 일반적으로 웹사이트를 꽤 잘 보여주고 있다. 때때로 <a href="http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/">뷰포트</a> 사이즈, 스케일, 웹사이트 해상도 등을 별도로 지정해주어 약간의 지원을 해줄 수 있다. 이것을 개선하기 위해 애플이 <code>viewport</code> 메타 태그를 만들었다.</p>

<p><strong>Fig. 4.04</strong>
이 데모는 미디어 쿼리를 사용했음에도 많은 모바일 기기들이 아직 웹사이트의 최초 너비나 크기를 알 수 없어서 미디어 쿼리가 적용되지 않을지도 모른다.
<img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/without-viewport.png" alt="Website without Viewport Meta Tag" /></p>

<h4 id="viewport-height--width">Viewport Height &amp; Width</h4>

<p><code>viewport</code> 메타 태그를 <code>height</code>나 <code>width</code> 값과 함께 사용하면 뷰포트의 높이나 너비를 각각 정의할 것이다. 각각의 값은 양의 정수나 키워드로 받아들인다. <code>height</code> 속성은 키워드 <code>device-height</code> 값을 받아들이고, <code>width</code> 속성은 키워드 <code>device-width</code>를 받아들인다. 이 키워드들을 이용해 기기의 기본 높이와 너비 값을 상속한다.</p>

<p>웹사이트가 가장 최적으로 보이는 결과를 위해 <code>device-height</code>와  <code>device-width</code> 값을 적용하여 기기 디폴트를 사용하는 것을 추천한다.</p>

<pre><code>&lt;meta name="viewport" content="width=device-width"&gt;
</code></pre>

<p><strong>Fig. 4.05</strong>
기기가 웹사이트의 의도된 너비(여기서는 <code>device-width</code>)를 알게하여 웹사이트를 적절한 크기로 나타내고 알맞는 미디어 쿼리를 선태할 수 있다.
<img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/with-viewport.png" alt="Website with Viewport Meta Tag" /></p>

<h4 id="viewport-scale">Viewport Scale</h4>

<p>모바일 기기에서 웹사이트의 크기를 조절하고 유저가 웹사이트의 크기를 지속적으로 조절할 수 있게 통제하러면 <code>minimum-scale</code>, <code>maximum-scale</code>, <code>initial-scale</code>, <code>user-scalable</code> 속성을 사용하라.</p>

<p>웹사이트의 <code>initial-scale</code>은 <code>1</code>로 설정해야하고, 이것은 세로 편향일 때의 기기 높이와 뷰포트 크기 간의 비율을 정의한다. 가로 편향에선 기기 너비와 뷰포트 크기간의 비율이 된다. <code>initial-scale</code> 값은 항상 <code>0</code>과 <code>10</code> 사이의 양의 정수이어야 한다.</p>

<pre><code>&lt;meta name="viewport" content="initial-scale=2"&gt; 
</code></pre>

<p><strong>Fig. 4.06</strong> 
<code>1</code>을 넘는 정수를 사용하면 웹사이트는 기본 크기보다 더 크게 확대될 것이다. 이 값을 <code>1</code>로 설정하는 것이 대부분의 공통사항이다.
<img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/viewport-scale.png" alt="Viewport Scale Meta Tag" /></p>

<p><code>minimum-scale</code>과 <code>maximum-scale</code> 값은 뷰포트가 얼마나 작고 커질지를 결정한다. <code>minimum-scale</code>을 사용할 경우 그 값은 <code>initial-scale</code>과 같거나 더 작은 양의 정수여야 한다. 같은 이유로 <code>maximum-scale</code> 값은 <code>initial-scale</code>과 같거나 더 큰 양의 정수여야 한다. 이 두 값도 역시 <code>0</code>과 <code>10</code> 사이여야 한다.</p>

<pre><code>&lt;meta name="viewport" content="minimum-scale=0"&gt;
</code></pre>

<p>일반적으로 이 값들은 <code>initial-scale</code>과 같은 값을 설정하지 말아야 한다. 이것은 확대를 못하게 하고 <code>user-scalable</code> 값으로 수행되는 확대 기능을 불가능하게 한다. <code>user-scalable</code> 값을 <code>no</code>로 설정하면 확대하지 못하게 될 것이고, <code>user-scalable</code> 값을 <code>yes</code>로 설정하면 확대 기능(zooming)이 켜진다.</p>

<p>웹사이트의 크기 조절을 가능하게 하는 것은 <strong>나쁜 아이디어</strong>다. 웹사이트를 바라던 대로 보지 못하게 방해하여 접근성과 사용성을 해친다.</p>

<pre><code>&lt;meta name="viewport" content="user-scalable=yes"&gt;
</code></pre>

<h4 id="viewport-resolution">Viewport Resolution</h4>

<p>브라우저가 모든 뷰포트 크기에 맞추어 웹사이트를 크기 조절하는 방법을 결정하게 하려면 일반적으로 트릭을 사용한다. 더 많은 제어가 요구될 때(특히, 기기 해상도 같은)는 <code>target-densitydpi</code>값이 사용될 수 있다. <code>target-densitydpi</code> 뷰포트는 <code>device-dpi</code>, <code>high-dpi</code>, <code>medium-dpi</code>, <code>low-dpi</code> 혹은 실제 DPI 수와 같은 값이 사용된다.</p>

<p><code>target-densitydpi</code> 뷰포트 값은 드물게 사용되지만 픽셀 단위 제어가 필요할 땐 매우 도움이 된다.</p>

<pre><code>&lt;meta name="viewport" content="target-densitydpi=device-dpi"&gt;
</code></pre>

<h4 id="combining-viewport-values">Combining Viewport Values</h4>

<p><code>viewport</code> 메타 태그는 개별 값만이 아니라 멀티 뷰포트 속성을 한번에 설정할 수 있는 멀티 값도 받아들인다. 멀티 값을 설정할 때는 <code>content</code> 속성 값 안에서 <code>,</code>로 분리해야 한다. 추천되는 뷰포트 값은 아래와 같이 <code>width</code>와 <code>initial-scale</code> 속성을 같이 사용하는 것이다.</p>

<pre><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;   
</code></pre>

<p><strong>Fig. 4.07</strong> 
<code>width=device-width</code>와 <code>initial-scale=1</code>의 조합은 일반적으로 요구되는 최초 크기와 줌(zoom)을 제공한다.
<img src="http://learn.shayhowe.com/assets/courses/advanced-html-css-guide/responsive-web-design/with-viewport.png" alt="Website with Viewport Meta Tag" /></p>

<h4 id="css-viewport-rule">CSS Viewport Rule</h4>

<p><code>viewport</code> 메타 태그는 웹사이트가 렌더링되어야 하는 스타일에 강하게 연관되어 있기 때문에 HTML 안의 메타태그보다는 CSS 안에서 <code>@</code> 룰로 옮길 것을 추천한다. 이렇게 하는 것은 컨텐츠에서 스타일을 분리하여 보다 시맨택적으로 접근하는 것을 도와준다.</p>

<p>현재 몇몇 브라우저는 이미 <code>@viewport</code> 룰을 적용했으나 전반적인 지원은 훌륭하지 않다. 위에서 추천된 <code>viewport</code> 메타 태그는 다음 CSS에서의 <code>@viewport</code> 룰과 같이 보여질 것이다.</p>

<pre><code>@viewport {
  width: device-width;
  zoom: 1;
}
</code></pre>

<h2 id="flexible-media">Flexible Media</h2>

<p>마지막 반응형 웹 디자인의 중요한 측면은 가변 미디어와 관련된 것이다. 뷰포트 크기가 변하기 시작하면 미디어가 항상 알맞게 따라오는 것은 아니다. 이미지, 비디오와 같은 미디어 타입은 뷰포트 변화에 맞추어 크기를 변화시킬 필요가 있다.</p>

<p>미디어 크기를 조절할 수 있게 하는 빠른 방법은 <code>max-width</code> 속성을 <code>100%</code> 값으로 주는 것이다. 그렇게 하면 뷰포트가 작아질 때 미디어의 크기가 컨테이너 너비에 맞추어 작아질 것이다.</p>

<pre><code>img, video, canvas {
  max-width: 100%;
}
</code></pre>

<h4 id="flexible-media-demohttplearnshayhowecomadvanced-html-cssresponsive-web-designflexible-media"><a href="http://learn.shayhowe.com/advanced-html-css/responsive-web-design#flexible-media">Flexible Media Demo</a></h4>

<h3 id="flexible-embedded-media">Flexible Embedded Media</h3>

<p>불행히도 <code>max-width</code> 속성이 모든 미디어 실례에서 잘 작동하진 않는다. <code>iframes</code>과 같이 임베딩된 미디어에서 특히 그렇다. 유투브와 같은 서드파티 웹사이트와 함께 할 때 아이프레임을 사용하여 미디어를 임베딩하면 엄청나게 실망하게 된다. 다행히 <a href="http://alistapart.com/article/creating-intrinsic-ratios-for-video">우회 방법</a>이 있다.</p>

<p>반응형을 완벽히 지원하는 임베딩된 미디어를 얻으려면 임베딩된 엘리먼트는 부모 엘리먼트 안에서 절대적으로 배치될(be absolutely positioned) 필요가 있다. 뷰포트의 너비에 기반하여 크기 조절될 수 있도록 부모 엘리먼트의 <code>width</code>가 <code>100%</code>로 요구된다. 또한, 인터넷 익스플로러에서는 <code>hasLayout</code> 매커니즘을 작동시키기 위해서 부모 엘리먼트의 <code>height</code>가 <code>0</code>로 요구된다.</p>

<p>그런 후 부모 엘리먼트의 <code>padding-bottom</code>을 주고, 그 값을 비디오의 종횡비와 같게 설정한다. 이렇게 하면 부모 엘리먼트의 높이가 너비에 비례하게 된다. 이전의 반응형 디자인 공식을 기억하는가? 비디오의 종횡비가 16:9라면 <code>9</code>를 <code>16</code>으로 나누면 <code>.5625</code>가 되며, <code>padding-bottom</code>은 <code>56.25%</code>가 요구된다. <code>padding-bottom</code>이 사용되고 부모 엘리먼트는 절대적으로 배치된 엘리먼트로 다룬다. <code>padding-top</code>은 인터넷 익스플로어 5.5에서 깨지는 방지하기 위해 특별히 사용된다.</p>

<p><em>원문 : Padding on the bottom and not the top is specifically used to prevent Internet Explorer 5.5 from breaking, and treating the parent element as an absolutely positioned element. - 이 부분은 무척 쉬운 듯하면서 몇번을 읽어봐도 정확하게 번역하기 힘들어 내맘대로 말그대로 막번역해버렸다. 마지막 문장이라 노력했지만 역부족이다. 고수님들이 도와주시면 좋겠는데.. ㅠㅠ</em></p>

<h6 id="html-2">HTML</h6>

<pre><code>&lt;figure&gt;
  &lt;iframe src="https://www.youtube.com/embed/4Fqg43ozz7A"&gt;&lt;/iframe&gt;
&lt;/figure&gt;
</code></pre>

<h6 id="css-2">CSS</h6>

<pre><code>figure {
  height: 0;
  padding-bottom: 56.25%; /* 16:9 */
  position: relative;
  width: 100%;
}
iframe {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
} 
</code></pre>

<h4 id="flexible-embedded-media-demohttplearnshayhowecomadvanced-html-cssresponsive-web-designflexible-embed"><a href="http://learn.shayhowe.com/advanced-html-css/responsive-web-design#flexible-embed">Flexible Embedded Media Demo</a></h4>

<h2 id="resources--links">Resources &amp; Links</h2>

<ul>
  <li><a href="http://www.alistapart.com/articles/responsive-web-design/">Responsive Web Design</a> via A List Apart</li>
  <li><a href="http://dev.w3.org/csswg/css3-values/#viewport-relative-lengths">Viewport Percentage Lengths</a> via W3C</li>
  <li><a href="http://css-tricks.com/css-media-queries/">CSS Media Queries</a> via CSS-Tricks</li>
  <li><a href="http://www.lukew.com/presos/preso.asp?26">Mobile First Presentation</a> via Luke Wroblewski</li>
  <li><a href="http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/">An Introduction to Meta Viewport and @viewport</a> via Dev.Opera</li>
</ul>
]]></content>
  </entry>
  
</feed>
