<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | Nolboo's Blog]]></title>
  <link href="http://nolboo.github.io/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://nolboo.github.io/"/>
  <updated>2013-10-22T15:17:17+09:00</updated>
  <id>http://nolboo.github.io/</id>
  <author>
    <name><![CDATA[Nolboo Kim]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS로 웹사이트를 인쇄가능하게 만들기]]></title>
    <link href="http://nolboo.github.io/blog/2013/09/26/printable-css/"/>
    <updated>2013-09-26T21:40:00+09:00</updated>
    <id>http://nolboo.github.io/blog/2013/09/26/printable-css</id>
    <content type="html"><![CDATA[<p><em>원문의 영어 단어는 쉬운데 해석하기가 어렵고 필요없는(?) 말이 많아서 필요한 부분만 발췌하였습니다.</em></p>

<p>원문 : <a href="http://www.creativebloq.com/responsive-web-design/make-your-website-printable-css-3132929">Make your website printable with CSS</a></p>

<p>이 방법은 개발자가 적은 노력으로 인쇄 페이지를 지원할 수 있는 방법이다.</p>

<!-- more -->

<h2 id="step-01-getting-started">Step 01. Getting started</h2>

<p>우선, 소스 웹 페이지와 비교하여 사이트를 어떻게 인쇄할 것인지를 생각해보자.</p>

<p><img src="http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/05/Hannah/table.jpg" alt="" /></p>

<p>웹페이지는 무한대로 스크롤할 수 있지만, 인쇄된 페이지는 종이 크기에 제한된다. 웹페이지가 비디오, 오디오, 접촉을 통한 피드백도 가능한 접근성을 갖는 반면, 인쇄된 페이지는 철저히 보는 매체이다. 웹페이지는 비트맵 데이타(사진, 그래픽)와 벡터 데이타(서체, SVG)를 표현할 수 있지만, 일단 인쇄되면 종이 위에 비트맵 데이타일 뿐이다. 웹페이지는 인터랙티브하고 스크린 상의 엘리먼트를 변경할 수 있지만, 인쇄된 페이지는 그렇지 않다. 이러한 것들이 인쇄된 페이지의 컨텐츠에 대한 결정을 하는 요인이 되기 때문에 모두 기억해두는 것이 유용할 것이다.</p>

<p><img src="http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/05/Hannah/01(67\).jpg" alt="" />
&gt; <strong>파이어폭스 테스크탑 브라우저에 본 예제 페이지. 오래 되었지만 아직 인쇄할만한다.</strong></p>

<p>페이지를 볼 때 사용자가 보길 원하는 것은 단 하나: 컨텐츠. 내 사이트이므로, 사용자가 인쇄할 때 유지해야할 페이지 상의 엘리먼트를 확실하게 하고 싶다:</p>

<ul>
  <li>브랜딩</li>
  <li>독자가 내 페이지를 찾는 방법</li>
  <li>저작권 문구</li>
  <li>회사의 CMS와 같은 크로스 브랜딩</li>
  <li>내 컨텐츠에 대한 링크 주소</li>
</ul>

<p>이에 반해, 대부분의 인쇄 사용자들이 보길 원하지 않는 다른 항목이 있다:</p>

<ul>
  <li>주 네비게이션</li>
  <li>보조 네비게이션</li>
  <li>사이트 검색</li>
  <li>소셜 아이콘과 링크</li>
</ul>

<p>마지막으로, 사용자나 내가 원하지 않는 몇 가지가 있다:</p>

<ul>
  <li>색상(특히 모노 프린터를 위해)</li>
  <li>배경 이미지(와 색상)</li>
  <li>타이밍/상호작용하는 엘리먼트(이미지 슬라이더의 사진과 같은)</li>
  <li>로고와 같은 화이트 이미지</li>
</ul>

<h2 id="step-02-make-a-home-for-print-styles">Step 02. Make a home for print styles</h2>

<p>프린트 스타일이 호출되기 위한 CSS를 설정하는 것이 첫번째 할일이다. RWD 코딩에 해봤다면, 다음은 친숙할 것이다:</p>

<p><code>css
@media print {
  /* insert your style declarations here */
}
</code></p>

<p>이런 접근으로만 한정되진 않는다. <code>&lt;head&gt;</code> 안에 <code>&lt;link&gt;</code>로 프린트 스타일을 호출할 수도 있다.</p>

<p><code>html
&lt;link rel="stylesheet" type="text/css" href="http://nolboo.github.io/css/print.css" media="print"&gt;
</code></p>

<p>이 방법은 추가적인 HTTP 요청과 관련이 있다. 브라우저는 페이지를 렌더링할 때 프린트 스타일이 필요하지 않으나, 대부분 모든 CSS 화일을 내려받기 전 까지는 페이지를 렌더링하지 않을 것이다; 오페라는 예외이다. 게다가, 최신 브라우저는 모든 화일이 다운로드되기 전까지는 어떤 온로드 이벤트를 작동하지 않는다. 프린트 스타일은 매우 적은 선언만을 포함할 수 있기 때문에 화일을 분리한다고 해서 추가적인 HTTP 오버헤드와 렌더링 지연이나 이벤트 작동을 고려할 필요가 그리 잦은 것은 아니다.</p>

<p><img src="http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/05/Hannah/02(63\).jpg" alt="" />
&gt; <strong>파이어폭스에서 PDF로 인쇄한 동일한 페이지. 몇 개가 사라지고 레이아웃이 단순해진 것을 볼 수 있다.</strong></p>

<h2 id="step-03-applying-the-styles">Step 03. Applying the styles</h2>

<p>내 로고는 텍스트이며, 컬러 프린터 사용자들이 빨간색으로 인쇄할 필요없도록 검정으로 변경할 것이다. </p>

<p><code>css
#Banner p#Title {
  font-size: 24pt;
}
#Banner p#Title a, #Banner p#Title a:link, #Banner p#Title a:visited {
  color: #000; /* change link to black text */
}
</code></p>

<p>브라우저가 인쇄된 페이지에 페이지 주소를 포함할 수 있다는 것을 알지만, 몇몇 사용자는 그것을 무시하고 몇몇 페이지 주소는 너무 길다. 페이지에 이동경로 탐색이 있기 때문에 남기기로 선택한다. 사용자가 푸터에 인쇄될 주소를 읽을 수 없더라도, 적어도 내 사이트의 해당 페이지의 경로를 볼 수는 있다. 독자가 내 사이트에서 해당 페이지를 찾을 수 있도록 하는 두번째 목표를 달성한다.</p>

<p><code>css
#Bread a:link, #Bread a:visited {
  text-decoration: underline; /* leave a clue that it&amp;rsquo;s a link */
  color: #000;
}
#Bread {
  color: #000;
  font-size: 6pt; /* make the text small */
}
#Bread &gt; a:after {
  content: ""; /* disable URL display if in #Content */
}
</code></p>

<p>푸터에 있는 모든 것을 인쇄하길 원하지 않는다. 예를 들면 검색 박스를 인쇄하지 않도록 한다.</p>

<p><code>css
#Footer {
  font-size: 6pt; /* make the text small */
  color: #000;
}
#SearchForm {
  display: none;
}
</code></p>

<p>푸터에 CMS 로고를 남긴다. (아마 독자가 신경쓰지 않을) URL을 보여줄 필요가 없으나, 브랜드는 남긴다. 크로스 브랜딩에 대한 네번째 목표이다.</p>

<p><code>css
#Footer img {
  float: right; /* defined elsewhere, included for completeness */
}
</code></p>

<p>다섯번째 목표는 문맥에 따른 링크의 전체 주소를 보여주는 것이다. 모든 링크 뒤에 주소를 포함하곤한다: 그러나, 몇몇 링크 주소를 믿을 수 없이 긴 - 사용자가 다시 타이핑할 수 없을 정도로 - 문제가 있을 수 있다.</p>

<p><img src="http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/05/Hannah/03(58\).jpg" alt="" />
&gt; <strong>크롬에서 인쇄 미리보기 대화 상자. 모든 인쇄 미리보기에서와 같이, 예상한 것에 대한 빠른 아이디어를 제공한다.</strong></p>

<p>하이퍼링크를 보여주기로 하였다면, 컨텐츠에 따라 제한하고 - 이동경로와 푸터에선 URL을 보여주지 않는다 - 가능하면 이미지에서 제외한 것 등을 기억하는 것이 중요하다.</p>

<p><code>css
#Content a:after { /* select links in the content area only */
  content: " [" attr(href) "] ";
  text-decoration: none;
  display: inline;
}
</code></p>

<p>이제 인쇄되길 원치않는 엘리먼트를 가려보자. 작은 화면에서 엘리먼트를 가리는 것 - RWD에선 좋은 아이디어가 아니지만 - 과 달리, 페이지는 이미 전부 다운로드되었고, 가려야 하는 엘리먼트는 인쇄 페이지에서 어떤 가치도 없어야 한다.</p>

<p>예제에서 네비게이션, 검색, 소셜 아이콘과 의미를 갖지 않는 다른 것들을 제거할 것이다.</p>

<p><code>css
#Nav, #FlyOutNav, #SubNav, .NoPrint, p.CodeAlert, #SMLinks, #SearchForm {
  display: none;
}
</code></p>

<p>아직 필요한 것을 전부한 것은 아니다.중요한 것을 까먹기지 않기 위해 거의 모든 인쇄 스타일시트를 적용할 수 있는 디폴트 스타일 세트를 가지고 있다. 사이트마다 정기적으로 조정하지만, 필요에 따른 좋은 시작점이 된다:</p>

<p><code>css
body {
    background: #fff;
    color: #000;
    font-size: 8pt;
    line-height: 150%;
    margin: 0px;
  }
  hr {
    color: #ccc;
    background-color: #ccc;
  }
  h1, h2, h3, h4, h5, h6, code, pre {
    color: #000;
    text-transform: none; /* because sometimes I set all-caps */
  }
  h1 {
    font-size: 11pt;
    margin-top: 1em;
  }
  h2 {
    font-size: 10pt;
  }
  h3 {
    font-size: 9pt;
  }
  h4, h5, h6 {
    font-size: 8pt;
  }
  code, pre {
    font-size: 8pt;
    background-color: transparent;
    /* just in case the user configured browser to print backgrounds */
  }
  blockquote {
    background-image: none;
    /* though they may not print, I’d rather be sure */
  }
  a:link, a:visited {
    text-decoration: underline;
    color: #000;
  }
  abbr:after, acronym:after { /* some HTML4 love */
    content: " (" attr(title) ") ";
    /* I suspect I am one of the few who still use these elements */
  }
</code></p>

<p>이 스타일시트는 몇 가지 기본적인 것을 해낸다:</p>

<ul>
  <li>컨텐츠 주변의 여백을 제거한다.(사용자는 인쇄 설정에서 페이지 여백을 다룰 수 있다)</li>
  <li>서체 크기를 재설정하고 텍스트를 검정색으로 설정한다.</li>
  <li>페이지의 <code>&lt;abbr&gt;</code>과 <code>&lt;acronym&gt;</code> 타이틀 속성 값을 입력한다.(이미지의 <code>alt text</code>와 같은 엘리먼트에도 사용할 수 있지만, 적당한 것은 아니다.)</li>
</ul>

<p><img src="http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/05/Hannah/04(61\).jpg" alt="" />
&gt; <strong>다른 종이 크기에서 테스트해야 한다. 랜드스케이프는 보기도 쉽고, 크기 조절 문제를 빠르게 테스트할 수 있게 한다.</strong></p>

<h2 id="step-04-further-tweaks">Step 04. Further tweaks</h2>

<p>사이트에 이미 모바일 레이아웃이 적용되었다면, 아마 선형 레이아웃에 고려한 스타일을 이미 갖고 있을 것입니다. 아무것도 하지 않았다면 시작점으로 모바일 친화적인 레이아웃을 사용하고, 네비게이션과 유지하길 원치 않는 엘리먼트를 꺼버릴 수 있다.</p>

<p>이제 다른 스크린 크기의 레이아웃을 고려하기 위해 다른 스타일을 생각해보자. 좋은 예는 뷰포트 사이즈에 기반한 이미지 사이즈를 크기 변경할 때이다.</p>

<p>많은 사이트의 특정 미디어 쿼리에서 100% 너비로 이미지를 크기변경하는 것을 보아왔다. 이건 종이 너비에 이미지를 무심히 맞춰버릴 수 있기에(때론 종이 전체에) 인쇄된 페이지에선 문제가 될 수 있다. 사용자 페이지와 잉크를 아낄 수 있게 이미지 크기를 줄이는 것을 고려하고, 몇 가지 경우엔 필요하다면 크기를 키우는 것까지도 고려해라.</p>

<p>종이에 위치하지 않은 레이아웃의 엘리먼트에 대해서도 생각해라. 예로, 플래쉬, 임베딩된 유투브 혹은 플레이할 수 있는 인터랙티브 위젯이 있는가?</p>

<p>인쇄 페이지에서 그것들을 같이 제거하는 것을 원할 것이다. 그렇지 않으면, 임베딩된 유투브 디비오는 많은 공간을 차지하거나 여백으로 나타날 것이다.</p>

<p><img src="http://media.creativebloq.futurecdn.net/sites/creativebloq.com/files/images/2013/05/Hannah/05(59\).jpg" alt="" />
&gt; <strong>어떤 유저는 페이지를 쉽게 읽게 하기위해 텍스트 크기를 키울 수 있다. 스타일을 조정할 필요가 있는지 이런 것을 테스트해라.</strong></p>

<h2 id="step-05-testing">Step 05. Testing</h2>

<p>모든 스타일이 준비되면, 테스트해라. 페이지를 프린트하지 않고 사용하는 두 가지 테크닉이 있다. 첫번째는 브라우저 인쇄 미리보기이다. - 스타일이 어떻게 해석되는지 알아보기 위한 빠른 방법이다. 두번째는 PDF로 인쇄해서 얻는 페이지를 보는 것이다.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[부트스트랩 3에서 새롭게 바뀐 것]]></title>
    <link href="http://nolboo.github.io/blog/2013/09/17/new-in-bootstrap3/"/>
    <updated>2013-09-17T23:09:00+09:00</updated>
    <id>http://nolboo.github.io/blog/2013/09/17/new-in-bootstrap3</id>
    <content type="html"><![CDATA[<p>원문 : <a href="http://julienrenaux.fr/2013/08/11/whats-new-in-twitter-bootstrap-3/">What’s new in Twitter Bootstrap 3?</a></p>

<h2 id="scaffolding">Scaffolding</h2>

<ul>
  <li>모바일 퍼스트, 반응형 12행 그리드</li>
</ul>

<h2 id="section">그리드 시스템</h2>

<p><code>.span*</code>에서 <code>.col-xs</code>, <code>.col-sm-*</code>, <code>.col-md-*</code>, <code>.col-lg-*</code>로 변경.
디폴트로 fluid이므로 <code>.container-fluid</code>와 <code>.row-fluid</code>은 제거.</p>

<p>모바일, 태블릿, 테스트탑에서 그리드 예제:</p>

<p><code>html
&lt;div class="row"&gt;
    &lt;div class="col-xs-6 col-sm-6 col-md-6 col-lg-6"&gt;6&lt;/div&gt;
    &lt;div class="col-xs-6 col-sm-6 col-md-6 col-lg-6"&gt;6&lt;/div&gt;
&lt;/div&gt;
</code></p>

<!-- more -->

<h2 id="section-1">반응형 디자인</h2>

<h3 id="section-2">반응형 이미지</h3>

<p>구글 맵스와 <a href="https://github.com/twbs/bootstrap/issues/1552">문제</a>가 있었는데, BS3에선 <code>.img-responsive</code> 클래스를 넣어 해결했다. 이 클래스는 이미지에 <code>max-width: 100%;</code>와 <code>height: auto;</code>를 적용하여 부모 엘리먼트에 따라 크기가 달라진다.</p>

<h3 id="section-3">반응형 유틸리티</h3>

<p><code>.visible-xs</code>, <code>.visible-sm</code>, <code>.visible-md</code>, <code>.visible-lg</code> 4개의 클래스로 크기별로 보이거나, <code>.hidden-xs</code>, <code>.hidden-sm</code>, <code>.hidden-md</code>, <code>.hidden-lg</code> 클래스로 숨길 수 있다.</p>

<h2 id="css">CSS</h2>

<p>글로발 CSS 설정, 기본 HTML 엘리먼트 스타일링
<code>*zoom: 1</code>, <code>-moz-box-shadow</code> 등의 hack을 없애고 IE7과 파이어폭스 3.6을 지원하지 않는다.</p>

<h3 id="typography">Typography</h3>

<p>헤딩, 리스트, 텍스트 클래스명이 좀 더 일관성있게 되었다. 예: .list-unstyled, .list-inline, .text-muted, .h1, .h2, .h3 등을 사용</p>

<h3 id="section-4">테이블</h3>

<p>기본적으로 <code>&lt;table&gt;</code>에 스타일링하지 않으며, <code>.table</code>을 사용하여 기본 스타일링을 한다.
<code>.table-hover</code>로 마우스 오버했을 때와 같이 <code>.active</code>로 열을 하일라이트할 수 있다.</p>

<h3 id="forms">Forms</h3>

<p><code>.input-prepend</code>, <code>.input-append</code>를 사용하지 않고 <code>input-group</code>을 사용한다.
수평폼도 모바일 퍼스트이므로, 768px 보다 작은 화면에서는 그냥 쌓인다.
<em><code>.form-control</code>과 함께 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code> 엘리먼트는 기본적으로 <code>width: 100%;</code>로 설정된다.</em></p>

<p><code>.radio-inline</code>은 그대로이고 <code>.form-group</code>이 추가되었으며, 다음은 없어졌다:</p>

<ul>
  <li>.inline-help  </li>
  <li>.help-inline  </li>
  <li>.uneditable-input </li>
  <li>.form-search  </li>
  <li>.input-block-level  </li>
  <li>.controls-row </li>
  <li>.input-prepend  </li>
  <li>.input-append</li>
</ul>

<h4 id="height-sizing">Height sizing</h4>

<p><code>.input-small</code>, <code>.input-large</code> 등을 사용할 때 버튼 크기에 따라 폼의 높이도 변경된다.</p>

<h3 id="buttons">Buttons</h3>

<p>기본 버튼도 <code>.button-default</code>가 필요하며, <code>.btn-inverse</code>는 없어졌다. 나머지 버튼 크기는 <code>btn-xs</code>, <code>.btn-sm</code>, <code>.btn-lg</code>로 바뀌었다.</p>

<h3 id="images">Images</h3>

<p><code>.img-polaroid</code>는 없어졌으며, 보통의 inline(-block) 이미지를 위한 <code>.img-thumbnail</code>이 추가되었다. <em><code>.img-responsive</code> 클래스를 추가하여 반응형에 가깝게 사용할 수 있다.</em></p>

<h2 id="components">Components</h2>

<h3 id="dropdown-menus">Dropdown menus</h3>

<p>드랍다운 메뉴에 헤더를 줄 수 있다.</p>

<h3 id="buttons-1">Buttons</h3>

<p><code>.btn-group-justified</code> 클래스로 부모 엘리먼트의 전체 너비와 같은 크기를 가질 수 있다.</p>

<h3 id="alerts">Alerts</h3>

<p><code>.alert</code> 컴포넌트 안의 <code>hr</code> 엘리먼트는 alert 색의 경계선으로 스타일링될 것이다. 링크도 가독성을 위해 자동으로 알맞게 스타일링된다.</p>

<h3 id="navs">Navs</h3>

<p><code>.nav-list</code>가 없어졌고, List group이 대신한다. 왼쪽/오른쪽/아래쪽 탭이 없어졌다. <strong>자바스크립트 플러그인과 커스텀 CSS로 왼쪽/오른쪽 탭을 사용할 수 있다. 그러나 이제 핵심 기능에 포함되지 않는다.</strong></p>

<h3 id="navbar">Navbar</h3>

<p>navbar의 높이가 모바일 기기에선 44px에서 62px로, 데스크탑에선 50px로 커졌고, 박스 그림자나 그라디언트되지 않는다. <code>.navbar-search</code>, <code>.divider-vertical</code>, <code>.navbar-inner</code>가 없어졌으며, 변경된 것은 다음과 같다:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">BS2</th>
      <th style="text-align: left">BS3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">.navbar &gt; .nav</td>
      <td style="text-align: left">.navbar-nav</td>
    </tr>
    <tr>
      <td style="text-align: left">.btn-navbar</td>
      <td style="text-align: left">.navbar-toggle</td>
    </tr>
    <tr>
      <td style="text-align: left">.brand</td>
      <td style="text-align: left">.navbar-brand</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="list-groupnew">List group(NEW)</h3>

<h4 id="basic-list-group">Basic list group</h4>

<p>기본적으로 BS2의 <code>.nav-list</code>와 같다. <strong>리스트 그룹 항목엔 배지를 추가할 수 있으며, 자동으로 오른쪽에 위치한다.</strong></p>

<p><code>html
&lt;ul class="list-group"&gt;
    &lt;li class="list-group-item"&gt;Cras justo odio&lt;/li&gt;
    &lt;li class="list-group-item"&gt;Dapibus ac facilisis in&lt;/li&gt;
    &lt;li class="list-group-item"&gt;Morbi leo risus&lt;/li&gt;
&lt;/ul&gt;
</code></p>

<h4 id="linked-list-group">Linked list group</h4>

<p><code>html
&lt;div class="list-group"&gt;
    &lt;a href="#" class="list-group-item active"&gt;Cras justo odio&lt;/a&gt;
    &lt;a href="#" class="list-group-item"&gt;Dapibus ac facilisis in&lt;/a&gt;
    &lt;a href="#" class="list-group-item"&gt;Morbi leo risus&lt;/a&gt;
&lt;/div&gt;
</code></p>

<h4 id="custom-content">Custom content</h4>

<p><code>html
&lt;div class="list-group"&gt;
    &lt;a href="#" class="list-group-item active"&gt;
        &lt;h4 class="list-group-item-heading"&gt;List group item heading&lt;/h4&gt;
        &lt;p class="list-group-item-text"&gt;Donec id elit non mi porta gravida at eget metus.&lt;/p&gt;
    &lt;/a&gt;
    &lt;a href="#" class="list-group-item"&gt;
        &lt;h4 class="list-group-item-heading"&gt;List group item heading&lt;/h4&gt;
        &lt;p class="list-group-item-text"&gt;Donec id elit non mi porta gravida at eget metus.&lt;/p&gt;
    &lt;/a&gt;
&lt;/div&gt;
</code></p>

<h3 id="typographic-components">Typographic components</h3>

<p>헤딩 <code>font-weight</code>가 가벼워졌으며, <strong>반응형 뷰에서 폰트 사이즈가 변경된다.</strong>
<code>.hero-unit</code>이 <code>.jumbotron</code>으로 바뀌었다.</p>

<h3 id="progress-bars">Progress bars</h3>

<p>구조가 다음과 같으며:</p>

<p><code>html
&lt;div class="progress"&gt;
    &lt;div class="progress-bar"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></p>

<p><code>.progress-bar-info</code>과 같은 클래스가 <code>.progress-bar</code>에 바로 옆에 오며, 다음과 같이 클래스가 바뀌었다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">BS2</th>
      <th style="text-align: left">BS3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">.bar</td>
      <td style="text-align: left">.progress-bar</td>
    </tr>
    <tr>
      <td style="text-align: left">.progress-info</td>
      <td style="text-align: left">.progress-bar-info</td>
    </tr>
    <tr>
      <td style="text-align: left">.progress-success</td>
      <td style="text-align: left">.progress-bar-success</td>
    </tr>
    <tr>
      <td style="text-align: left">.progress-warning</td>
      <td style="text-align: left">.progress-bar-warning</td>
    </tr>
    <tr>
      <td style="text-align: left">.progress-danger</td>
      <td style="text-align: left">.progress-bar-danger</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="panelsnew">Panels(NEW)</h3>

<p>헤더와 푸터를 가진 박스를 만들 수 있다.</p>

<h4 id="panel-with-heading">Panel with heading</h4>

<p><code>html
&lt;div class="panel"&gt;
    &lt;div class="panel-heading"&gt;
        &lt;h3 class="panel-title"&gt;Panel title&lt;/h3&gt;
    &lt;/div&gt;
    Panel content
&lt;/div&gt;
</code></p>

<h4 id="panel-with-footer">Panel with footer</h4>

<p><code>html
&lt;div class="panel"&gt;
    Panel content
    &lt;div class="panel-footer"&gt;Panel footer&lt;/div&gt;
&lt;/div&gt;
</code></p>

<h4 id="contextual-alternatives">Contextual alternatives</h4>

<p>문맥 상태(success, warning, danger, info)를 나타내는 <code>.panel-success</code> 등의 클래스를 사용하여 의미있는 패널을 만들 수 있다.</p>

<p><code>html
&lt;div class="panel panel-success"&gt;
    &lt;div class="panel-heading"&gt;
        &lt;h3 class="panel-title"&gt;Panel title&lt;/h3&gt;
    &lt;/div&gt;
    Panel content
&lt;/div&gt;
</code></p>

<h2 id="sources">Sources</h2>

<ul>
  <li><a href="http://blog.getbootstrap.com/">Bootstrap Blog</a></li>
  <li><a href="https://github.com/twbs/bootstrap/pull/6342">List of changes and useful tips</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
